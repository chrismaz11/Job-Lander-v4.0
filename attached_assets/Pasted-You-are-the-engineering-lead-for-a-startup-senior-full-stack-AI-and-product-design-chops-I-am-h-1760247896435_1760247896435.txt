You are the engineering lead for a startup — senior full-stack, AI, and product design chops. I am handing you an existing, broken Job-Lander site. Your mission: **rebuild and enhance it 10×** across every major area (AI, job search, blockchain verification, templates, cover letters, portfolios), fix the current broken UX, and deliver a finished, production-grade Replit project that I can deploy or zip and push to Vercel. Think outside the box. Be bold. No half-baked scaffolding. Ship the product.

ASSUMPTIONS (do not ask me):
- Use Gemini Pro for LLM tasks (prompt templates must be explicit and reusable).
- Use Canva Connect SDK for templates (embed editor + API fill).
- Use Polygon testnet (Mumbai) for on-chain verification with ethers.js.
- No external paid DB required for MVP — use file-backed storage on Replit for now and provide clear upgrade path to Mongo Atlas/Postgres.
- Must run inside Replit free tier limits; heavy inference calls go to Gemini cloud.

HIGH-LEVEL OBJECTIVES (deliver all of these):
1. Fix the broken landing page and replace the “piece of paper” template preview with real, selectable **Canva template previews** (free preview images or embed thumbnails) and an actual working “Design with Canva” flow that opens the Canva editor inside the app for a chosen template.
2. Resume upload must work — accepts PDF and DOCX, returns parsed data in editable form fields. No silent fails. If parsing fails, show a helpful line-by-line extraction UI and allow manual correction.
3. Job Search must accept **city-only queries** (e.g., “Chicago”), plus keyword/title. Support filters: remote, full-time/part-time, salary range. Results must be paginated and semantic (LLM-assisted matching).
4. Cover letter generator — one-click, three-tone options (professional, concise, bold), generated by Gemini using the parsed resume + job posting context. Exportable to Canva template for styling.
5. Blockchain verification: When a user finalizes a resume PDF, compute SHA-256, store metadata in a JSON ledger, and broadcast the hash to Polygon Mumbai testnet via a minimal Solidity contract. Show a confirm UI with tx hash, block number, and a verification link. Keep on-chain gas budget minimal and bundle writes if needed.
6. Portfolios — auto-generate a single-page portfolio site from resume projects. Offer one-click deploy to Vercel (generate instructions + vercel config) or export as static HTML.
7. Templates: Provide at least 6 distinct pre-wired template categories (Modern Professional, Minimalist, Creative, Executive, Student, Tech). Each template must be visually distinct, previewable, and export exact parity between preview and generated PDF.
8. AI/LLM integration: Centralized LLM service module with prompt templates for parsing, rewriting bullets, ATS optimization, and job matching. Cache results and show confidence scores. All Gemini requests must be modular and easy to swap to another LLM.
9. UX/Polish: Mobile-responsive, Tailwind-based UI with dark mode toggle, clear error states, progress spinners, and success toasts. No console errors. Loading states for AI and blockchain ops.
10. Deliverables: a runnable Replit project with `npm run dev` root script that starts frontend + backend; a single `job-lander-replit.zip` available in the workspace; README with local run, Replit run, and Vercel deploy steps; `.env.example` with keys placeheld.

ACCEPTANCE CRITERIA (automated/manual tests you must pass before finishing):
- Upload a sample 2-page PDF resume → parsing UI populates name, email, phone, 3+ experiences, education, skills. Confidence per field ≥ medium shown.
- Select a Canva template → open Canva editor embed and see populated data in the template preview.
- Generate a cover letter for a sample job posting → returns 3 tone variants within 6 seconds (Gemini response).
- Search by city (e.g., "Chicago") only → returns at least 10 mock or API-sourced jobs for Chicago.
- Finalize resume → export PDF; compute SHA-256 and invoke `verifyOnChain()` → transaction submitted to Polygon Mumbai (show tx hash).
- No broken UI placeholders, no “Designed by Canva” placeholder only — real template preview.
- All core routes present: `/api/parse`, `/api/generate-resume`, `/api/generate-coverletter`, `/api/canva/create-template`, `/api/find-jobs`, `/api/verify-on-chain`.

IMPLEMENTATION DETAILS (be explicit, pragmatic):
- FRONTEND: Vite + React + Tailwind. Use React Router for pages: `/`, `/create`, `/templates`, `/jobs`, `/verify`, `/portfolio`. Use the Canva Embed SDK for `Design with Canva`. Use html2pdf or Puppeteer fallback serverless endpoint for pixel-perfect PDF export parity.
- BACKEND: Node.js + Express. Single-file storage in `/data` for Replit. Use `multer` for uploads. Provide an LLM adapter module `services/llmAdapter.js` that calls Gemini Pro (or fallback local mock) with explicit prompt templates.
- PARSER: Two-step pipeline: (1) extract text via `pdf-parse` / `mammoth`, (2) send to Gemini parsing prompt to map to JSON schema. If Gemini returns low confidence, return raw extraction with UI "Needs Review".
- CANVA: Clone or import `canva-connect-api-starter-kit` into `backend/canva/`. Implement OAuth redirect flow, token exchange, template listing endpoint, and `create-design-session` route that returns the Canva editor URL to frontend. Provide an option to export PDF via Canva API or download the design asset and continue.
- BLOCKCHAIN: Put `contracts/Verifier.sol` (minimal contract to store bytes32 hash -> event). Include `backend/blockchain/deploy.js` (uses ethers.js to deploy to Mumbai via INFURA/Alchemy RPC). For Replit, use `WEB3_RPC_URL` in `.env`. Provide `verifyOnChain` route which bundles writes and returns tx data.
- JOB SEARCH: Use free JSearch/RapidAPI mock integration; if API keys missing, fallback to `jobs/sample-jobs.json` seeded with city fields. Implement semantic ranking: compute embedding of resume and job descriptions (use Gemini embeddings or simple TF-IDF if embeddings unavailable) and sort by similarity.
- COVER LETTERS: Prompt template that uses `{resume_json}` + `{job_description}` to generate 3 variants. Provide "tone" selector and editable text area before export.
- PORTFOLIO: Build a simple generator that assembles a one-page site from resume projects; offer "Export to Vercel" button which generates vercel config + zip.

NON-NEGOTIABLES:
- No placeholder text that says "TODO" in UI; all features must be real or explicitly show graceful fallback (with explicit feedback to user).
- Error messages must be user-friendly and actionable.
- Keep privacy in mind: DO NOT write sensitive user data to chain — only store SHA-256 hashes and minimal metadata.
- Provide a `diagnostics` page to show logs, LLM latencies, blockchain tx status, and last 10 uploads.

FINAL PACKAGING:
- When finished, output:
  1. The live Replit run URL (if deployed in Replit).
  2. Location of created `job-lander-replit.zip` in workspace root.
  3. README with deploy steps for Vercel and how to move blockchain to mainnet safely.

TIME SENSITIVITY:
- Replit free credits are limited. Prioritize core flows (upload→parse→template→generate→verify). If time or compute prevents full Canva export or chain write, finish UI and workflows and mark the operation as "requires external key" with clear instructions. But do not leave the primary features broken.

Begin now. Create the full working project and confirm each acceptance test locally within the Replit environment. Report back the live URL and zip path when complete.
