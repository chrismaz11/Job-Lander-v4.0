You are a senior full-stack developer and AI integrator. Your task is to build a production-ready web application called **Job-Lander** using React (frontend), Node.js/Express (backend), and Vite as the build tool. The app helps users create AI-generated resumes, cover letters, and job search tools — powered by Gemini Pro for text generation and Canva for professional design templates.

This project must:
1. Be fully working and deployable on Vercel or AWS with no broken links or placeholder code.
2. Use the Canva Connect API Starter Kit (https://github.com/canva-sdks/canva-connect-api-starter-kit.git) for all design and template management.
3. Integrate Gemini Pro for AI content generation (resumes, cover letters, summaries, and job applications).
4. Include a blockchain reference verification microservice that hashes the resume metadata (name, timestamp, and hash of final PDF) to a testnet (Polygon Mumbai or Sepolia test network). Use `ethers.js` and store hashes in a simple smart contract. Include deploy + verify scripts.
5. Allow users to:
   - Upload an existing resume (PDF/DOCX)
   - Auto-parse and extract relevant data using an AI parser
   - Choose a Canva template (fetched via the Canva API)
   - Auto-fill and preview the resume
   - Generate a downloadable PDF
   - Verify the authenticity via blockchain hash
6. Include a simple REST API for all key backend endpoints:
   - `/api/generate-resume`
   - `/api/generate-coverletter`
   - `/api/find-jobs`
   - `/api/canva/create-template`
   - `/api/verify-on-chain`
7. Include a “Job Search” section that fetches listings via a public job API (use `JSearch` or `RapidAPI` job listings).
8. Include proper routing: `/`, `/create`, `/verify`, `/jobs`, `/templates`
9. Use TailwindCSS for clean modern styling with dark mode enabled.
10. Include a minimal landing page modeled after Canva’s clean UI, but branded for Job-Lander (hero headline, CTA button, mockup section, and footer).

Technical Requirements:
- Use React + Vite for frontend (`frontend/`)
- Use Node.js + Express for backend (`backend/`)
- Include the Canva starter kit inside `backend/canva/`
- Use `dotenv` for secrets (`CANVA_CLIENT_ID`, `CANVA_SECRET`, `GEMINI_API_KEY`, `WEB3_RPC_URL`)
- Implement secure error handling and proper 404 routing
- Auto-create a `.env.example` file with placeholder variables
- Include a `/README.md` explaining how to run locally and deploy
- Make sure `npm run dev` starts both servers (use `concurrently`)

Bonus:
- Include user authentication with Clerk or Firebase (optional if time allows)
- Show a toast notification when blockchain verification completes successfully
- Ensure all Gemini API calls have proper prompt templates for clarity and reusability

Output:
✅ A fully structured project in Replit with the following file tree:

job-lander/
├── frontend/
│   ├── index.html
│   ├── src/
│   │   ├── App.jsx
│   │   ├── components/
│   │   ├── pages/
│   │   ├── styles/
│   └── package.json
├── backend/
│   ├── server.js
│   ├── routes/
│   ├── controllers/
│   ├── canva/
│   │   └── (from Canva Connect API Starter Kit)
│   ├── blockchain/
│   │   ├── contract.sol
│   │   ├── deploy.js
│   │   └── verify.js
│   ├── services/
│   ├── package.json
├── .env.example
├── README.md
└── vercel.json

At the end, the project should build successfully with no broken references, missing imports, or unused modules.

Now, create this full working app end-to-end. Do not include placeholder content. Finish the entire build before exiting.