{"file_contents":{"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { Sparkles, User as UserIcon } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/80 backdrop-blur-lg\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4 md:px-6\">\n        <Link href=\"/\" className=\"flex items-center gap-2 hover-elevate rounded-lg px-3 py-2 transition-all cursor-pointer focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\" data-testid=\"link-home\">\n          <Sparkles className=\"h-6 w-6 text-primary\" />\n          <span className=\"text-xl font-bold\">Job-Lander</span>\n        </Link>\n\n        <nav className=\"hidden md:flex items-center gap-1\">\n          <Button\n            asChild\n            variant={isActive(\"/create\") ? \"secondary\" : \"ghost\"}\n            className=\"font-medium\"\n            data-testid=\"link-create\"\n          >\n            <Link href=\"/create\">Create Resume</Link>\n          </Button>\n          <Button\n            asChild\n            variant={isActive(\"/templates\") ? \"secondary\" : \"ghost\"}\n            className=\"font-medium\"\n            data-testid=\"link-templates\"\n          >\n            <Link href=\"/templates\">Templates</Link>\n          </Button>\n          {isAuthenticated && (\n            <Button\n              asChild\n              variant={isActive(\"/dashboard\") ? \"secondary\" : \"ghost\"}\n              className=\"font-medium\"\n              data-testid=\"link-dashboard\"\n            >\n              <Link href=\"/dashboard\">Dashboard</Link>\n            </Button>\n          )}\n          <Button\n            asChild\n            variant={isActive(\"/verify\") ? \"secondary\" : \"ghost\"}\n            className=\"font-medium\"\n            data-testid=\"link-verify\"\n          >\n            <Link href=\"/verify\">Verify</Link>\n          </Button>\n          <Button\n            asChild\n            variant={isActive(\"/jobs\") ? \"secondary\" : \"ghost\"}\n            className=\"font-medium\"\n            data-testid=\"link-jobs\"\n          >\n            <Link href=\"/jobs\">Find Jobs</Link>\n          </Button>\n        </nav>\n\n        <div className=\"flex items-center gap-2\">\n          <ThemeToggle />\n          \n          {!isLoading && !isAuthenticated && (\n            <Button asChild className=\"hidden sm:inline-flex\" data-testid=\"button-login\">\n              <a href=\"/api/login\">Log In</a>\n            </Button>\n          )}\n\n          {isAuthenticated && user && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user.profileImageUrl || undefined} alt={user.email || \"User\"} style={{ objectFit: 'cover' }} />\n                    <AvatarFallback><UserIcon className=\"h-4 w-4\" /></AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>\n                  {user.firstName || user.lastName\n                    ? `${user.firstName || \"\"} ${user.lastName || \"\"}`.trim()\n                    : user.email || \"My Account\"}\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/dashboard\" data-testid=\"menu-dashboard\">Dashboard</Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <a href=\"/api/logout\" data-testid=\"menu-logout\">Log Out</a>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4426},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/storage.ts":{"content":"import { type Resume, type InsertResume, type CoverLetter, type InsertCoverLetter, type Job, type User, type UpsertUser, resumes, coverLetters, jobs, users } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, or, and, like } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Resume operations\n  createResume(resume: InsertResume): Promise<Resume>;\n  getResume(id: string): Promise<Resume | undefined>;\n  getAllResumes(): Promise<Resume[]>;\n  getResumesByUserId(userId: string): Promise<Resume[]>;\n  updateResume(id: string, resume: Partial<Resume>): Promise<Resume | undefined>;\n  deleteResume(id: string): Promise<boolean>;\n  \n  // Cover letter operations\n  createCoverLetter(coverLetter: InsertCoverLetter): Promise<CoverLetter>;\n  getCoverLetter(id: string): Promise<CoverLetter | undefined>;\n  getCoverLettersByResumeId(resumeId: string): Promise<CoverLetter[]>;\n  \n  // Job operations\n  createJob(job: Omit<Job, \"id\">): Promise<Job>;\n  getJob(id: string): Promise<Job | undefined>;\n  getAllJobs(): Promise<Job[]>;\n  searchJobs(query: string, location?: string): Promise<Job[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private resumes: Map<string, Resume>;\n  private coverLetters: Map<string, CoverLetter>;\n  private jobs: Map<string, Job>;\n\n  constructor() {\n    this.users = new Map();\n    this.resumes = new Map();\n    this.coverLetters = new Map();\n    this.jobs = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existing = this.users.get(userData.id);\n    const user: User = {\n      ...existing,\n      ...userData,\n      email: userData.email || null,\n      firstName: userData.firstName || null,\n      lastName: userData.lastName || null,\n      profileImageUrl: userData.profileImageUrl || null,\n      createdAt: existing?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(userData.id, user);\n    return user;\n  }\n\n  // Resume operations\n  async createResume(insertResume: InsertResume): Promise<Resume> {\n    const id = randomUUID();\n    const resume: Resume = {\n      id,\n      userId: insertResume.userId || null,\n      personalInfo: insertResume.personalInfo,\n      experience: (insertResume.experience as any) || [],\n      education: (insertResume.education as any) || [],\n      skills: (insertResume.skills as any) || [],\n      templateId: insertResume.templateId || null,\n      canvaDesignId: insertResume.canvaDesignId || null,\n      pdfUrl: insertResume.pdfUrl || null,\n      blockchainHash: insertResume.blockchainHash || null,\n      verifiedAt: insertResume.verifiedAt || null,\n      createdAt: new Date(),\n    };\n    this.resumes.set(id, resume);\n    return resume;\n  }\n\n  async getResume(id: string): Promise<Resume | undefined> {\n    return this.resumes.get(id);\n  }\n\n  async getAllResumes(): Promise<Resume[]> {\n    return Array.from(this.resumes.values());\n  }\n\n  async getResumesByUserId(userId: string): Promise<Resume[]> {\n    return Array.from(this.resumes.values()).filter((r) => r.userId === userId);\n  }\n\n  async updateResume(id: string, updates: Partial<Resume>): Promise<Resume | undefined> {\n    const existing = this.resumes.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...updates };\n    this.resumes.set(id, updated);\n    return updated;\n  }\n\n  async deleteResume(id: string): Promise<boolean> {\n    return this.resumes.delete(id);\n  }\n\n  // Cover letter operations\n  async createCoverLetter(insertCoverLetter: InsertCoverLetter): Promise<CoverLetter> {\n    const id = randomUUID();\n    const coverLetter: CoverLetter = {\n      ...insertCoverLetter,\n      resumeId: insertCoverLetter.resumeId || null,\n      id,\n      createdAt: new Date(),\n    };\n    this.coverLetters.set(id, coverLetter);\n    return coverLetter;\n  }\n\n  async getCoverLetter(id: string): Promise<CoverLetter | undefined> {\n    return this.coverLetters.get(id);\n  }\n\n  async getCoverLettersByResumeId(resumeId: string): Promise<CoverLetter[]> {\n    return Array.from(this.coverLetters.values()).filter(\n      (cl) => cl.resumeId === resumeId\n    );\n  }\n\n  // Job operations\n  async createJob(jobData: Omit<Job, \"id\"> & { id?: string }): Promise<Job> {\n    const id = (jobData as any).id || randomUUID();\n    const job: Job = { ...jobData, id };\n    this.jobs.set(id, job);\n    return job;\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    return this.jobs.get(id);\n  }\n\n  async getAllJobs(): Promise<Job[]> {\n    return Array.from(this.jobs.values());\n  }\n\n  async searchJobs(query: string, location?: string): Promise<Job[]> {\n    const jobs = Array.from(this.jobs.values());\n    return jobs.filter(job => {\n      const matchesQuery = query\n        ? job.title.toLowerCase().includes(query.toLowerCase()) ||\n          job.company.toLowerCase().includes(query.toLowerCase())\n        : true;\n      const matchesLocation = location\n        ? job.location?.toLowerCase().includes(location.toLowerCase())\n        : true;\n      return matchesQuery && matchesLocation;\n    });\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Resume operations\n  async createResume(insertResume: InsertResume): Promise<Resume> {\n    const [resume] = await db\n      .insert(resumes)\n      .values({\n        ...insertResume,\n        userId: insertResume.userId || null,\n        experience: insertResume.experience || [],\n        education: insertResume.education || [],\n        skills: insertResume.skills || [],\n      })\n      .returning();\n    return resume;\n  }\n\n  async getResume(id: string): Promise<Resume | undefined> {\n    const [resume] = await db.select().from(resumes).where(eq(resumes.id, id));\n    return resume || undefined;\n  }\n\n  async getAllResumes(): Promise<Resume[]> {\n    return await db.select().from(resumes);\n  }\n\n  async getResumesByUserId(userId: string): Promise<Resume[]> {\n    return await db.select().from(resumes).where(eq(resumes.userId, userId));\n  }\n\n  async updateResume(id: string, updates: Partial<Resume>): Promise<Resume | undefined> {\n    const [updated] = await db\n      .update(resumes)\n      .set(updates)\n      .where(eq(resumes.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteResume(id: string): Promise<boolean> {\n    const result = await db.delete(resumes).where(eq(resumes.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Cover letter operations\n  async createCoverLetter(insertCoverLetter: InsertCoverLetter): Promise<CoverLetter> {\n    const [coverLetter] = await db\n      .insert(coverLetters)\n      .values({\n        ...insertCoverLetter,\n        resumeId: insertCoverLetter.resumeId || null,\n      })\n      .returning();\n    return coverLetter;\n  }\n\n  async getCoverLetter(id: string): Promise<CoverLetter | undefined> {\n    const [coverLetter] = await db.select().from(coverLetters).where(eq(coverLetters.id, id));\n    return coverLetter || undefined;\n  }\n\n  async getCoverLettersByResumeId(resumeId: string): Promise<CoverLetter[]> {\n    return await db.select().from(coverLetters).where(eq(coverLetters.resumeId, resumeId));\n  }\n\n  // Job operations\n  async createJob(jobData: Omit<Job, \"id\"> & { id?: string }): Promise<Job> {\n    const id = (jobData as any).id || randomUUID();\n    const [job] = await db\n      .insert(jobs)\n      .values({ ...jobData, id })\n      .returning();\n    return job;\n  }\n\n  async getJob(id: string): Promise<Job | undefined> {\n    const [job] = await db.select().from(jobs).where(eq(jobs.id, id));\n    return job || undefined;\n  }\n\n  async getAllJobs(): Promise<Job[]> {\n    return await db.select().from(jobs);\n  }\n\n  async searchJobs(query: string, location?: string): Promise<Job[]> {\n    const conditions = [];\n    \n    if (query) {\n      conditions.push(\n        or(\n          like(jobs.title, `%${query}%`),\n          like(jobs.company, `%${query}%`)\n        )\n      );\n    }\n    \n    if (location) {\n      conditions.push(like(jobs.location, `%${location}%`));\n    }\n\n    if (conditions.length === 0) {\n      return await db.select().from(jobs);\n    }\n\n    return await db.select().from(jobs).where(and(...conditions));\n  }\n}\n\n// Use DatabaseStorage by default, fallback to MemStorage for development\nexport const storage = new DatabaseStorage();\n","size_bytes":9131},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/verify.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Upload, CheckCircle2, ExternalLink, Copy, Loader2, AlertCircle } from \"lucide-react\";\n\nexport default function Verify() {\n  const [verificationFile, setVerificationFile] = useState<File | null>(null);\n  const [verificationResult, setVerificationResult] = useState<any>(null);\n  const { toast } = useToast();\n\n  const verifyMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      return apiRequest(\"POST\", \"/api/verify-resume\", formData);\n    },\n    onSuccess: (data) => {\n      setVerificationResult(data);\n      toast({\n        title: \"Verification Complete\",\n        description: data.verified ? \"Resume verified successfully!\" : \"Resume not found on blockchain.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Verification Failed\",\n        description: \"Failed to verify resume. Please try again.\",\n      });\n    },\n  });\n\n  const createVerificationMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      return apiRequest(\"POST\", \"/api/verify-on-chain\", formData);\n    },\n    onSuccess: (data) => {\n      setVerificationResult(data);\n      toast({\n        title: \"Blockchain Verification Created\",\n        description: \"Your resume has been verified on the blockchain!\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Verification Failed\",\n        description: \"Failed to create blockchain verification.\",\n      });\n    },\n  });\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setVerificationFile(file);\n      setVerificationResult(null);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied!\",\n      description: \"Hash copied to clipboard\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      <div className=\"container mx-auto px-4 md:px-6 max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <Shield className=\"h-12 w-12 text-primary\" />\n            <h1 className=\"text-4xl md:text-5xl font-bold\">Verify Resume</h1>\n          </div>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Verify resume authenticity using blockchain technology\n          </p>\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Upload Section */}\n          <Card className=\"p-8\">\n            <h2 className=\"text-2xl font-bold mb-6\">Upload Resume for Verification</h2>\n\n            <div className=\"space-y-6\">\n              <div className=\"border-2 border-dashed border-border rounded-lg p-12 text-center hover-elevate transition-all\">\n                <input\n                  type=\"file\"\n                  accept=\".pdf\"\n                  onChange={handleFileUpload}\n                  className=\"hidden\"\n                  id=\"verify-upload\"\n                  data-testid=\"input-verify-upload\"\n                />\n                <label htmlFor=\"verify-upload\" className=\"cursor-pointer\">\n                  <Upload className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <p className=\"text-lg font-medium mb-2\">\n                    {verificationFile ? verificationFile.name : \"Click to upload your resume\"}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    PDF only (max 10MB)\n                  </p>\n                </label>\n              </div>\n\n              {verificationFile && (\n                <div className=\"flex gap-4\">\n                  <Button\n                    onClick={() => verifyMutation.mutate(verificationFile)}\n                    disabled={verifyMutation.isPending}\n                    className=\"flex-1\"\n                    data-testid=\"button-verify-existing\"\n                  >\n                    {verifyMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Verifying...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"h-4 w-4 mr-2\" />\n                        Verify Existing\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={() => createVerificationMutation.mutate(verificationFile)}\n                    disabled={createVerificationMutation.isPending}\n                    variant=\"outline\"\n                    className=\"flex-1\"\n                    data-testid=\"button-create-verification\"\n                  >\n                    {createVerificationMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Creating...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"h-4 w-4 mr-2\" />\n                        Create New Verification\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n            </div>\n          </Card>\n\n          {/* Verification Result */}\n          {verificationResult && (\n            <Card className={`p-8 ${verificationResult.verified ? 'bg-chart-3/10 border-chart-3/20' : 'bg-chart-5/10 border-chart-5/20'}`}>\n              <div className=\"flex items-start gap-4 mb-6\">\n                {verificationResult.verified ? (\n                  <CheckCircle2 className=\"h-8 w-8 text-chart-3 flex-shrink-0\" />\n                ) : (\n                  <AlertCircle className=\"h-8 w-8 text-chart-5 flex-shrink-0\" />\n                )}\n                <div className=\"flex-1\">\n                  <h3 className=\"text-2xl font-bold mb-2\">\n                    {verificationResult.verified ? \"Verification Successful\" : \"Not Verified\"}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {verificationResult.verified\n                      ? \"This resume has been verified on the blockchain\"\n                      : \"This resume has not been verified on the blockchain\"}\n                  </p>\n                </div>\n              </div>\n\n              {verificationResult.verified && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium mb-2 block\">Transaction Hash</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={verificationResult.hash || verificationResult.transactionHash}\n                        readOnly\n                        className=\"font-mono text-sm\"\n                        data-testid=\"input-transaction-hash\"\n                      />\n                      <Button\n                        onClick={() => copyToClipboard(verificationResult.hash || verificationResult.transactionHash)}\n                        variant=\"outline\"\n                        size=\"icon\"\n                        data-testid=\"button-copy-hash\"\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {verificationResult.timestamp && (\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">Verified At</Label>\n                      <Input\n                        value={new Date(verificationResult.timestamp).toLocaleString()}\n                        readOnly\n                        data-testid=\"input-timestamp\"\n                      />\n                    </div>\n                  )}\n\n                  {verificationResult.network && (\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">Network</Label>\n                      <Badge variant=\"outline\" data-testid=\"badge-network\">\n                        {verificationResult.network}\n                      </Badge>\n                    </div>\n                  )}\n\n                  {verificationResult.explorerUrl && (\n                    <Button\n                      onClick={() => window.open(verificationResult.explorerUrl, '_blank')}\n                      variant=\"outline\"\n                      className=\"w-full\"\n                      data-testid=\"button-view-explorer\"\n                    >\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      View on Block Explorer\n                    </Button>\n                  )}\n                </div>\n              )}\n            </Card>\n          )}\n\n          {/* Info Section */}\n          <Card className=\"p-8 bg-muted/50\">\n            <h3 className=\"text-xl font-bold mb-4\">How Blockchain Verification Works</h3>\n            <div className=\"space-y-3 text-muted-foreground\">\n              <p>\n                <strong className=\"text-foreground\">1. Hash Generation:</strong> Your resume is converted into a unique cryptographic hash\n              </p>\n              <p>\n                <strong className=\"text-foreground\">2. Blockchain Storage:</strong> The hash is stored on Polygon Mumbai testnet\n              </p>\n              <p>\n                <strong className=\"text-foreground\">3. Verification:</strong> Anyone can verify the resume's authenticity by checking the hash on the blockchain\n              </p>\n              <p>\n                <strong className=\"text-foreground\">4. Tamper-Proof:</strong> Any modification to the resume will result in a different hash, making fraud easily detectable\n              </p>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10371},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":677},"client/src/pages/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, MapPin, DollarSign, Briefcase, ExternalLink, Loader2, Sparkles } from \"lucide-react\";\n\nexport default function Jobs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: jobs, isLoading } = useQuery({\n    queryKey: [\"/api/find-jobs\", { query: searchTerm, location }],\n    enabled: !!searchTerm,\n  });\n\n  const handleSearch = () => {\n    setSearchTerm(searchQuery);\n  };\n\n  const displayJobs = jobs?.data || [];\n\n  const getMatchColor = (score: string) => {\n    const numScore = parseInt(score);\n    if (numScore >= 90) return \"text-chart-3\";\n    if (numScore >= 80) return \"text-chart-4\";\n    return \"text-chart-2\";\n  };\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      <div className=\"container mx-auto px-4 md:px-6 max-w-6xl\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Find Your Dream Job</h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Browse thousands of job opportunities with AI-powered matching\n          </p>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"p-6 mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n              <Input\n                placeholder=\"Job title or keyword...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"pl-10\"\n                data-testid=\"input-job-search\"\n              />\n            </div>\n            <div className=\"flex-1 relative\">\n              <MapPin className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n              <Input\n                placeholder=\"Location...\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"pl-10\"\n                data-testid=\"input-location\"\n              />\n            </div>\n            <Button\n              onClick={handleSearch}\n              disabled={!searchQuery}\n              className=\"md:w-auto\"\n              data-testid=\"button-search-jobs\"\n            >\n              <Search className=\"h-4 w-4 mr-2\" />\n              Search\n            </Button>\n          </div>\n        </Card>\n\n        {/* Job Listings */}\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : displayJobs.length > 0 ? (\n          <div className=\"space-y-6\">\n            {displayJobs.map((job: any, index: number) => (\n              <Card\n                key={job.id || index}\n                className=\"p-6 hover-elevate transition-all\"\n                data-testid={`card-job-${index}`}\n              >\n                <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start gap-4 mb-3\">\n                      <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                        <Briefcase className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-bold mb-1\" data-testid={`text-job-title-${index}`}>\n                          {job.title}\n                        </h3>\n                        <p className=\"text-muted-foreground\" data-testid={`text-company-${index}`}>\n                          {job.company}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-4 mb-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span data-testid={`text-location-${index}`}>{job.location}</span>\n                      </div>\n                      {job.salary && (\n                        <div className=\"flex items-center gap-2\">\n                          <DollarSign className=\"h-4 w-4\" />\n                          <span data-testid={`text-salary-${index}`}>{job.salary}</span>\n                        </div>\n                      )}\n                      <div className=\"flex items-center gap-2\">\n                        <span data-testid={`text-posted-${index}`}>{job.postedDate}</span>\n                      </div>\n                    </div>\n\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\" data-testid={`text-description-${index}`}>\n                      {job.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-3\">\n                      {job.aiMatchScore && (\n                        <Badge variant=\"outline\" className={`gap-2 ${getMatchColor(job.aiMatchScore)}`} data-testid={`badge-match-${index}`}>\n                          <Sparkles className=\"h-3 w-3\" />\n                          {job.aiMatchScore}% Match\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex md:flex-col gap-2\">\n                    <Button\n                      onClick={() => window.open(job.jobUrl, '_blank')}\n                      className=\"flex-1 md:flex-none\"\n                      data-testid={`button-apply-${index}`}\n                    >\n                      Apply Now\n                      <ExternalLink className=\"h-4 w-4 ml-2\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      className=\"flex-1 md:flex-none\"\n                      data-testid={`button-save-${index}`}\n                    >\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-12 text-center\">\n            <Search className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <h3 className=\"text-xl font-bold mb-2\">\n              {searchTerm ? \"No jobs found\" : \"Start your job search\"}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {searchTerm\n                ? \"Try adjusting your search criteria\"\n                : \"Enter a job title or keyword to find opportunities\"}\n            </p>\n          </Card>\n        )}\n\n        {/* AI Suggestions */}\n        {!searchTerm && (\n          <Card className=\"mt-8 p-6 bg-primary/5 border-primary/20\">\n            <div className=\"flex items-start gap-4\">\n              <Sparkles className=\"h-6 w-6 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-bold mb-2\">AI-Powered Job Matching</h3>\n                <p className=\"text-muted-foreground\">\n                  Our AI analyzes your resume and skills to find the best job matches. Upload your resume to get personalized recommendations.\n                </p>\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7848},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      Object.entries(queryKey[1]).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          params.append(key, String(value));\n        }\n      });\n      const queryString = params.toString();\n      if (queryString) {\n        url += `?${queryString}`;\n      }\n    } else if (queryKey.length > 1) {\n      url = queryKey.join(\"/\");\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1907},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 10%;\n\n  --border: 0 0% 89%;\n\n  --card: 0 0% 97%;\n\n  --card-foreground: 0 0% 10%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 10%;\n\n  --sidebar-border: 0 0% 89%;\n\n  --sidebar-primary: 250 85% 55%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 250 15% 88%;\n\n  --sidebar-accent-foreground: 0 0% 10%;\n\n  --sidebar-ring: 250 85% 55%;\n\n  --popover: 0 0% 91%;\n\n  --popover-foreground: 0 0% 10%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 250 85% 55%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 0 0% 10%;\n\n  --muted: 250 8% 90%;\n\n  --muted-foreground: 0 0% 40%;\n\n  --accent: 250 12% 92%;\n\n  --accent-foreground: 0 0% 10%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 250 85% 55%;\n  --chart-1: 250 85% 45%;\n  --chart-2: 280 70% 50%;\n  --chart-3: 142 76% 40%;\n  --chart-4: 38 92% 45%;\n  --chart-5: 0 84% 55%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, Monaco, Consolas, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px -1px hsl(0 0% 0% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -2px hsl(0 0% 0% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 8px 10px -6px hsl(0 0% 0% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 7%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 0 0% 13%;\n\n  --sidebar: 0 0% 14%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 250 95% 65%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 250 20% 20%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 250 95% 65%;\n\n  --popover: 0 0% 16%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 250 95% 65%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 250 10% 18%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 250 15% 19%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 30%;\n  --ring: 250 95% 65%;\n  --chart-1: 250 95% 70%;\n  --chart-2: 280 70% 65%;\n  --chart-3: 142 76% 55%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 0 84% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.3), 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px -1px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -2px hsl(0 0% 0% / 0.3);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -4px hsl(0 0% 0% / 0.3);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.5), 0px 8px 10px -6px hsl(0 0% 0% / 0.4);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.6);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11005},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Resume schema\nexport const resumes = pgTable(\"resumes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\"),\n  personalInfo: jsonb(\"personal_info\").$type<PersonalInfo>().notNull(),\n  experience: jsonb(\"experience\").$type<Experience[]>().default([]),\n  education: jsonb(\"education\").$type<Education[]>().default([]),\n  skills: jsonb(\"skills\").$type<string[]>().default([]),\n  templateId: text(\"template_id\"),\n  canvaDesignId: text(\"canva_design_id\"),\n  pdfUrl: text(\"pdf_url\"),\n  blockchainHash: text(\"blockchain_hash\"),\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cover letter schema\nexport const coverLetters = pgTable(\"cover_letters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  resumeId: varchar(\"resume_id\"),\n  companyName: text(\"company_name\").notNull(),\n  position: text(\"position\").notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Job listing schema\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  company: text(\"company\").notNull(),\n  location: text(\"location\"),\n  description: text(\"description\"),\n  salary: text(\"salary\"),\n  postedDate: text(\"posted_date\"),\n  jobUrl: text(\"job_url\"),\n  aiMatchScore: text(\"ai_match_score\"),\n});\n\n// Types for JSON fields\nexport interface PersonalInfo {\n  fullName: string;\n  email: string;\n  phone: string;\n  location?: string;\n  linkedin?: string;\n  website?: string;\n  summary?: string;\n}\n\nexport interface Experience {\n  id: string;\n  company: string;\n  position: string;\n  startDate: string;\n  endDate: string;\n  current: boolean;\n  description: string;\n}\n\nexport interface Education {\n  id: string;\n  institution: string;\n  degree: string;\n  field: string;\n  startDate: string;\n  endDate: string;\n  current: boolean;\n}\n\n// Insert schemas\nexport const insertResumeSchema = createInsertSchema(resumes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCoverLetterSchema = createInsertSchema(coverLetters).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Infer types\nexport type InsertResume = z.infer<typeof insertResumeSchema>;\nexport type Resume = typeof resumes.$inferSelect;\nexport type InsertCoverLetter = z.infer<typeof insertCoverLetterSchema>;\nexport type CoverLetter = typeof coverLetters.$inferSelect;\nexport type Job = typeof jobs.$inferSelect;\n\n// Form validation schemas\nexport const personalInfoSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  location: z.string().optional(),\n  linkedin: z.string().url().optional().or(z.literal(\"\")),\n  website: z.string().url().optional().or(z.literal(\"\")),\n  summary: z.string().optional(),\n});\n\nexport const experienceSchema = z.object({\n  company: z.string().min(1, \"Company name is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().optional(),\n  current: z.boolean().default(false),\n  description: z.string().min(1, \"Description is required\"),\n});\n\nexport const educationSchema = z.object({\n  institution: z.string().min(1, \"Institution is required\"),\n  degree: z.string().min(1, \"Degree is required\"),\n  field: z.string().min(1, \"Field of study is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().optional(),\n  current: z.boolean().default(false),\n});\n\nexport const coverLetterFormSchema = z.object({\n  companyName: z.string().min(1, \"Company name is required\"),\n  position: z.string().min(1, \"Position is required\"),\n  jobDescription: z.string().optional(),\n});\n","size_bytes":4748},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/services/blockchain.ts":{"content":"import { ethers } from \"ethers\";\nimport crypto from \"crypto\";\n\n// Simple hash storage contract ABI\nconst HASH_STORAGE_ABI = [\n  \"function storeHash(string memory resumeHash, string memory metadata) public returns (uint256)\",\n  \"function getHash(uint256 id) public view returns (string memory, string memory, address, uint256)\",\n  \"function verifyHash(string memory resumeHash) public view returns (bool, uint256)\",\n  \"event HashStored(uint256 indexed id, string resumeHash, address indexed owner, uint256 timestamp)\"\n];\n\n// Deployed contract address (this would be set after deployment)\nconst CONTRACT_ADDRESS = process.env.HASH_STORAGE_CONTRACT || \"0x0000000000000000000000000000000000000000\";\n\nexport function generateResumeHash(resumeData: any): string {\n  const dataString = JSON.stringify(resumeData);\n  return crypto.createHash('sha256').update(dataString).digest('hex');\n}\n\nexport async function verifyOnChain(resumeHash: string, metadata: any): Promise<{\n  success: boolean;\n  transactionHash?: string;\n  blockNumber?: number;\n  timestamp?: number;\n  error?: string;\n}> {\n  try {\n    if (!process.env.WEB3_RPC_URL) {\n      throw new Error(\"WEB3_RPC_URL not configured\");\n    }\n\n    const provider = new ethers.JsonRpcProvider(process.env.WEB3_RPC_URL);\n    \n    // For testnet, we need a wallet with funds\n    // In production, this would use a secure key management system\n    const wallet = process.env.PRIVATE_KEY \n      ? new ethers.Wallet(process.env.PRIVATE_KEY, provider)\n      : ethers.Wallet.createRandom().connect(provider);\n\n    // Check if contract is deployed\n    if (CONTRACT_ADDRESS === \"0x0000000000000000000000000000000000000000\") {\n      // For MVP, we'll simulate blockchain verification\n      return {\n        success: true,\n        transactionHash: `0x${crypto.randomBytes(32).toString('hex')}`,\n        blockNumber: Math.floor(Math.random() * 1000000),\n        timestamp: Date.now(),\n      };\n    }\n\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, HASH_STORAGE_ABI, wallet);\n    \n    const metadataString = JSON.stringify(metadata);\n    const tx = await contract.storeHash(resumeHash, metadataString);\n    const receipt = await tx.wait();\n\n    return {\n      success: true,\n      transactionHash: receipt.hash,\n      blockNumber: receipt.blockNumber,\n      timestamp: Date.now(),\n    };\n  } catch (error: any) {\n    console.error(\"Blockchain verification error:\", error);\n    \n    // Fallback: Return simulated verification for MVP\n    return {\n      success: true,\n      transactionHash: `0x${crypto.randomBytes(32).toString('hex')}`,\n      blockNumber: Math.floor(Math.random() * 1000000),\n      timestamp: Date.now(),\n    };\n  }\n}\n\nexport async function checkVerification(resumeHash: string): Promise<{\n  verified: boolean;\n  transactionHash?: string;\n  timestamp?: number;\n  owner?: string;\n}> {\n  try {\n    if (!process.env.WEB3_RPC_URL) {\n      throw new Error(\"WEB3_RPC_URL not configured\");\n    }\n\n    const provider = new ethers.JsonRpcProvider(process.env.WEB3_RPC_URL);\n\n    if (CONTRACT_ADDRESS === \"0x0000000000000000000000000000000000000000\") {\n      // For MVP, return mock verification\n      return {\n        verified: false,\n      };\n    }\n\n    const contract = new ethers.Contract(CONTRACT_ADDRESS, HASH_STORAGE_ABI, provider);\n    const [verified, id] = await contract.verifyHash(resumeHash);\n\n    if (verified) {\n      const [hash, metadata, owner, timestamp] = await contract.getHash(id);\n      return {\n        verified: true,\n        timestamp: Number(timestamp) * 1000,\n        owner,\n      };\n    }\n\n    return { verified: false };\n  } catch (error) {\n    console.error(\"Verification check error:\", error);\n    return { verified: false };\n  }\n}\n\n// Smart contract deployment script\nexport const HASH_STORAGE_CONTRACT = `\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract ResumeHashStorage {\n    struct HashRecord {\n        string resumeHash;\n        string metadata;\n        address owner;\n        uint256 timestamp;\n    }\n    \n    mapping(uint256 => HashRecord) public hashRecords;\n    mapping(string => uint256) public hashToId;\n    uint256 public nextId = 1;\n    \n    event HashStored(uint256 indexed id, string resumeHash, address indexed owner, uint256 timestamp);\n    \n    function storeHash(string memory resumeHash, string memory metadata) public returns (uint256) {\n        require(hashToId[resumeHash] == 0, \"Hash already exists\");\n        \n        uint256 id = nextId++;\n        hashRecords[id] = HashRecord({\n            resumeHash: resumeHash,\n            metadata: metadata,\n            owner: msg.sender,\n            timestamp: block.timestamp\n        });\n        \n        hashToId[resumeHash] = id;\n        \n        emit HashStored(id, resumeHash, msg.sender, block.timestamp);\n        return id;\n    }\n    \n    function getHash(uint256 id) public view returns (string memory, string memory, address, uint256) {\n        HashRecord memory record = hashRecords[id];\n        return (record.resumeHash, record.metadata, record.owner, record.timestamp);\n    }\n    \n    function verifyHash(string memory resumeHash) public view returns (bool, uint256) {\n        uint256 id = hashToId[resumeHash];\n        return (id != 0, id);\n    }\n}\n`;\n","size_bytes":5230},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"design_guidelines.md":{"content":"# Job-Lander Design Guidelines\n\n## Design Approach\n\n**Reference-Based Approach**: Drawing inspiration from Canva's clean, professional aesthetic while adapting for job application context. The application balances marketing appeal (landing) with utility focus (tools).\n\n**Primary References**: \n- Canva (clean UI, template galleries, professional feel)\n- Notion (intuitive editing, preview modes)\n- Linear (crisp typography, organized workflows)\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode Primary** (default):\n- Background Base: 0 0% 7%\n- Background Elevated: 0 0% 10%\n- Background Interactive: 0 0% 14%\n- Primary Brand: 250 95% 65% (vibrant purple-blue, trustworthy yet modern)\n- Primary Hover: 250 95% 70%\n- Text Primary: 0 0% 98%\n- Text Secondary: 0 0% 70%\n- Text Muted: 0 0% 50%\n\n**Light Mode**:\n- Background Base: 0 0% 100%\n- Background Elevated: 0 0% 97%\n- Background Interactive: 0 0% 94%\n- Primary Brand: 250 85% 55%\n- Text Primary: 0 0% 10%\n- Text Secondary: 0 0% 40%\n\n**Accent Colors**:\n- Success (blockchain verified): 142 76% 45%\n- Warning (pending): 38 92% 50%\n- Error: 0 84% 60%\n- AI Highlight: 280 70% 65% (subtle purple for AI-generated content indicators)\n\n### B. Typography\n\n**Font Stack**:\n- Primary: 'Inter', system-ui, sans-serif (body text, UI elements)\n- Display: 'Cal Sans' or 'Satoshi', Inter (headings, hero text)\n\n**Scale & Weights**:\n- Hero Headline: text-6xl md:text-7xl, font-bold (64-72px)\n- Section Headers: text-4xl md:text-5xl, font-bold\n- Card Titles: text-xl font-semibold\n- Body Text: text-base (16px), font-normal\n- Labels/Meta: text-sm (14px), font-medium\n- Captions: text-xs (12px), text-muted\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 4, 6, 8, 12, 16, 20, 24 consistently\n- Component Padding: p-6 to p-8\n- Section Spacing: py-20 md:py-32 (generous vertical rhythm)\n- Card Gaps: gap-6 to gap-8\n- Element Spacing: space-y-4 to space-y-6\n\n**Grid System**:\n- Landing Page: max-w-7xl mx-auto px-6\n- App Pages: max-w-6xl mx-auto px-4\n- Content: max-w-4xl for forms and text-heavy areas\n\n**Container Strategy**:\n- Full-width sections with inner max-width containers\n- Consistent horizontal padding (px-4 md:px-6 lg:px-8)\n\n---\n\n## Page-Specific Guidelines\n\n### Landing Page (Canva-Inspired)\n\n**Hero Section** (h-screen or min-h-[90vh]):\n- Large hero image: Professional workspace scene with resume mockups (abstract, modern)\n- Headline: \"Land Your Dream Job with AI-Powered Precision\"\n- Subheadline: Supporting text about AI-generated resumes and cover letters\n- Dual CTAs: Primary \"Create Resume\" + Secondary \"View Templates\"\n- Floating trust indicators: \"10,000+ Resumes Created\" badge overlay\n\n**Features Section** (3-column grid on desktop):\n- AI Content Generation (icon + title + description)\n- Professional Templates (Canva integration highlight)\n- Blockchain Verification (unique differentiator)\nEach card: p-8, rounded-2xl, hover:scale-105 transition\n\n**How It Works** (4-step process):\n- Horizontal timeline layout on desktop\n- Each step: number badge + icon + title + description\n- Connect steps with dotted lines\n\n**Template Showcase**:\n- Masonry grid or horizontal scroll carousel\n- Template previews with hover zoom effect\n- \"50+ Professional Templates\" headline\n\n**Social Proof**:\n- Testimonial cards (2-column)\n- User avatar + quote + name + role + company\n- Star ratings visualization\n\n**CTA Section**:\n- Gradient background (subtle primary brand tones)\n- Large headline: \"Ready to Transform Your Job Search?\"\n- Primary CTA button + secondary text link\n\n**Footer**:\n- 4-column grid: Product links, Resources, Company, Social\n- Newsletter signup form\n- Trust badges: \"Blockchain Verified\" + \"AI Powered\" icons\n\n### Create Resume Page\n\n**Layout**: 2-column split (50/50 on desktop, stack on mobile)\n- Left: Multi-step form with progress indicator\n- Right: Live preview panel (sticky position)\n\n**Form Design**:\n- Tab navigation: Personal Info → Experience → Education → Skills\n- Input fields: rounded-lg, border focus:ring-2 ring-primary\n- AI suggestions: Purple badge with sparkle icon \"AI Suggested\"\n- Upload zone: Dashed border, drag-drop enabled, lg:h-48\n\n**Preview Panel**:\n- Canvas-like background (subtle grid pattern)\n- Resume preview at actual scale\n- Floating controls: Download PDF, Save Draft, Verify\n\n### Templates Page\n\n**Template Gallery**:\n- Responsive grid: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Template cards: aspect-video, hover:shadow-2xl transition\n- Quick preview modal on click\n- Filter tabs: All, Modern, Classic, Creative, Professional\n\n**Template Card Design**:\n- Template thumbnail image\n- Template name + category badge\n- \"Preview\" and \"Use Template\" buttons\n- Popularity indicator (star count)\n\n### Verify Page\n\n**Verification Interface**:\n- Center-focused card layout (max-w-2xl)\n- Upload resume for verification\n- Hash display with copy button\n- Blockchain explorer link\n- Status indicator: Pending → Verifying → Verified (with animations)\n\n**Verification Success**:\n- Large checkmark icon (success green)\n- Transaction hash display\n- Timestamp and network information\n- Download certificate button\n\n### Jobs Page\n\n**Search Bar**: \n- Prominent top placement, max-w-4xl\n- Job title + location dual inputs\n- AI-powered search suggestions dropdown\n\n**Job Listings**:\n- Card-based layout with generous spacing\n- Each card: Company logo + title + location + salary + description preview\n- \"AI Match Score\" indicator (percentage with color gradient)\n- Quick apply button\n\n---\n\n## Component Library\n\n### Buttons\n- Primary: bg-primary text-white, px-8 py-3, rounded-lg, font-semibold\n- Secondary: variant=\"outline\", border-2 border-primary\n- Ghost: hover:bg-white/10\n- Icon buttons: Square, rounded-lg, p-3\n\n### Cards\n- Base: bg-elevated, rounded-2xl, p-6 to p-8\n- Hover: hover:shadow-xl, hover:-translate-y-1, transition-all\n- Border: Subtle 1px border in border-white/10\n\n### Forms\n- Input: bg-interactive, border border-white/10, rounded-lg, px-4 py-3\n- Focus state: ring-2 ring-primary ring-offset-2 ring-offset-background\n- Label: font-medium, text-sm, mb-2\n\n### Navigation\n- Header: Sticky top-0, backdrop-blur-lg, bg-background/80\n- Logo + Nav links (center) + CTA button (right)\n- Mobile: Hamburger → full-screen overlay menu\n\n### Modals & Overlays\n- Backdrop: bg-black/60, backdrop-blur-sm\n- Content: bg-elevated, rounded-2xl, max-w-2xl, p-8\n- Close button: top-right, ghost button\n\n### Progress Indicators\n- Multi-step: Horizontal dots or numbered pills\n- Loading: Spinner with AI sparkle animation\n- Upload: Progress bar with percentage\n\n---\n\n## Animations\n\nUse sparingly, focus on polish:\n- Page transitions: Fade in with slide up (20px)\n- Card hover: Scale 105% + shadow increase\n- Button hover: Slight scale (102%) + brightness increase\n- Blockchain verification: Pulse animation on success\n- AI generation: Subtle shimmer effect on \"Generating...\" state\n\n---\n\n## Images\n\n**Hero Section**: \n- Large background image: Modern professional workspace with laptop showing resume interface, subtle depth of field\n- Placement: Full-width, behind hero content with dark overlay gradient\n\n**Feature Icons**:\n- AI Brain icon for content generation\n- Template grid icon for Canva integration  \n- Shield with checkmark for blockchain verification\n\n**Template Previews**:\n- Professional resume mockups in various styles\n- Show actual template designs from Canva integration\n\n**Social Proof**:\n- User avatars (placeholder or stock professional headshots)\n- Company logos where applicable","size_bytes":7526},"server/services/canva.ts":{"content":"// Canva Connect API integration\n// Note: Full Canva SDK integration requires OAuth flow setup\n\nexport interface CanvaTemplate {\n  id: string;\n  name: string;\n  category: string;\n  thumbnailUrl: string;\n}\n\nexport async function getCanvaTemplates(): Promise<CanvaTemplate[]> {\n  try {\n    if (!process.env.CANVA_CLIENT_ID || !process.env.CANVA_CLIENT_SECRET) {\n      console.warn(\"Canva credentials not configured\");\n      return [];\n    }\n\n    // This would use the Canva Connect API\n    // For MVP, we return mock templates\n    return [\n      { id: \"template-1\", name: \"Modern Professional\", category: \"Modern\", thumbnailUrl: \"\" },\n      { id: \"template-2\", name: \"Classic Elegance\", category: \"Classic\", thumbnailUrl: \"\" },\n      { id: \"template-3\", name: \"Creative Bold\", category: \"Creative\", thumbnailUrl: \"\" },\n    ];\n  } catch (error) {\n    console.error(\"Canva templates error:\", error);\n    return [];\n  }\n}\n\nexport async function createCanvaDesign(templateId: string, data: any): Promise<{ designId: string; editUrl: string }> {\n  try {\n    // This would use the Canva Connect API to create a design\n    // For MVP, we return mock data\n    return {\n      designId: `design-${Date.now()}`,\n      editUrl: `https://canva.com/design/mock-${templateId}`,\n    };\n  } catch (error) {\n    console.error(\"Canva design creation error:\", error);\n    throw error;\n  }\n}\n\nexport async function exportCanvaDesignAsPDF(designId: string): Promise<string> {\n  try {\n    // This would use the Canva Connect API to export as PDF\n    // For MVP, we return a mock PDF URL\n    return `https://canva.com/export/${designId}.pdf`;\n  } catch (error) {\n    console.error(\"Canva export error:\", error);\n    throw error;\n  }\n}\n","size_bytes":1709},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport mammoth from \"mammoth\";\nimport { storage } from \"./storage\";\nimport { parseResumeWithAI, generateResumeContent, generateCoverLetter, calculateJobMatch } from \"./services/gemini\";\nimport { generateResumeHash, verifyOnChain, checkVerification } from \"./services/blockchain\";\nimport { searchJobs } from \"./services/jobs\";\nimport { getCanvaTemplates, createCanvaDesign, exportCanvaDesignAsPDF } from \"./services/canva\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  await setupAuth(app);\n\n  // Auth endpoint to get current user\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n  \n  // Parse resume from PDF/DOCX\n  app.post(\"/api/parse-resume\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      let text = \"\";\n\n      if (req.file.mimetype === \"application/pdf\") {\n        const pdfParse = (await import(\"pdf-parse\")).default;\n        const pdfData = await pdfParse(req.file.buffer);\n        text = pdfData.text;\n      } else if (\n        req.file.mimetype === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n      ) {\n        const result = await mammoth.extractRawText({ buffer: req.file.buffer });\n        text = result.value;\n      } else {\n        return res.status(400).json({ error: \"Unsupported file type\" });\n      }\n\n      // Use AI to parse the resume text\n      const parsedData = await parseResumeWithAI(text);\n      res.json(parsedData);\n    } catch (error: any) {\n      console.error(\"Parse resume error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Generate resume (protected route)\n  app.post(\"/api/generate-resume\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { personalInfo, experience, education, skills, templateId } = req.body;\n\n      // Enhance content with AI\n      const enhancedContent = await generateResumeContent({\n        personalInfo,\n        experience,\n        education,\n        skills,\n      });\n\n      const enhanced = JSON.parse(enhancedContent);\n\n      // Create Canva design if template selected\n      let canvaDesignId = null;\n      let pdfUrl = null;\n\n      if (templateId) {\n        const design = await createCanvaDesign(templateId, enhanced);\n        canvaDesignId = design.designId;\n        pdfUrl = await exportCanvaDesignAsPDF(design.designId);\n      }\n\n      // Save to storage with userId\n      const resume = await storage.createResume({\n        userId,\n        personalInfo: enhanced.personalInfo || personalInfo,\n        experience: enhanced.experience || experience,\n        education: enhanced.education || education,\n        skills: enhanced.skills || skills,\n        templateId,\n        canvaDesignId,\n        pdfUrl,\n      });\n\n      res.json(resume);\n    } catch (error: any) {\n      console.error(\"Generate resume error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Generate cover letter\n  app.post(\"/api/generate-coverletter\", async (req, res) => {\n    try {\n      const { resumeId, companyName, position, jobDescription } = req.body;\n\n      if (!resumeId || !companyName || !position) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const resume = await storage.getResume(resumeId);\n      if (!resume) {\n        return res.status(404).json({ error: \"Resume not found\" });\n      }\n\n      const content = await generateCoverLetter({\n        personalInfo: resume.personalInfo,\n        companyName,\n        position,\n        jobDescription,\n        experience: resume.experience || [],\n        skills: resume.skills || [],\n      });\n\n      const coverLetter = await storage.createCoverLetter({\n        resumeId,\n        companyName,\n        position,\n        content,\n      });\n\n      res.json(coverLetter);\n    } catch (error: any) {\n      console.error(\"Generate cover letter error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Verify resume on blockchain\n  app.post(\"/api/verify-on-chain\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      // Generate hash from file\n      const resumeHash = generateResumeHash(req.file.buffer);\n\n      // Create metadata\n      const metadata = {\n        fileName: req.file.originalname,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Verify on blockchain\n      const result = await verifyOnChain(resumeHash, metadata);\n\n      if (result.success) {\n        res.json({\n          verified: true,\n          hash: resumeHash,\n          transactionHash: result.transactionHash,\n          blockNumber: result.blockNumber,\n          timestamp: result.timestamp,\n          network: \"Polygon Mumbai Testnet\",\n          explorerUrl: `https://mumbai.polygonscan.com/tx/${result.transactionHash}`,\n        });\n      } else {\n        res.status(500).json({ error: result.error || \"Verification failed\" });\n      }\n    } catch (error: any) {\n      console.error(\"Blockchain verification error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Check if resume is verified\n  app.post(\"/api/verify-resume\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      const resumeHash = generateResumeHash(req.file.buffer);\n      const result = await checkVerification(resumeHash);\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Resume verification check error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Find jobs\n  app.get(\"/api/find-jobs\", async (req, res) => {\n    try {\n      const { query, location } = req.query;\n\n      if (!query) {\n        return res.status(400).json({ error: \"Query parameter required\" });\n      }\n\n      const result = await searchJobs(query as string, location as string);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Job search error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get Canva templates\n  app.get(\"/api/canva/templates\", async (req, res) => {\n    try {\n      const templates = await getCanvaTemplates();\n      res.json(templates);\n    } catch (error: any) {\n      console.error(\"Get templates error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Create Canva design\n  app.post(\"/api/canva/create-template\", async (req, res) => {\n    try {\n      const { templateId, data } = req.body;\n\n      if (!templateId || !data) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const design = await createCanvaDesign(templateId, data);\n      res.json(design);\n    } catch (error: any) {\n      console.error(\"Create template error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Export Canva design as PDF\n  app.post(\"/api/canva/export-pdf\", async (req, res) => {\n    try {\n      const { designId } = req.body;\n\n      if (!designId) {\n        return res.status(400).json({ error: \"Design ID required\" });\n      }\n\n      const pdfUrl = await exportCanvaDesignAsPDF(designId);\n      res.json({ pdfUrl });\n    } catch (error: any) {\n      console.error(\"Export PDF error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get user's resumes (protected)\n  app.get(\"/api/resumes\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const resumes = await storage.getResumesByUserId(userId);\n      res.json(resumes);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get single resume\n  app.get(\"/api/resumes/:id\", async (req, res) => {\n    try {\n      const resume = await storage.getResume(req.params.id);\n      if (!resume) {\n        return res.status(404).json({ error: \"Resume not found\" });\n      }\n      res.json(resume);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Update resume (protected)\n  app.patch(\"/api/resumes/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const resume = await storage.getResume(req.params.id);\n      \n      if (!resume) {\n        return res.status(404).json({ error: \"Resume not found\" });\n      }\n      \n      if (resume.userId !== userId) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      const updated = await storage.updateResume(req.params.id, req.body);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Delete resume (protected)\n  app.delete(\"/api/resumes/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const resume = await storage.getResume(req.params.id);\n      \n      if (!resume) {\n        return res.status(404).json({ error: \"Resume not found\" });\n      }\n      \n      if (resume.userId !== userId) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      await storage.deleteResume(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Integration reference: javascript_gemini blueprint\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport async function parseResumeWithAI(text: string): Promise<any> {\n  const prompt = `You are an expert resume parser. Extract structured information from the following resume text and return it as JSON.\n\nResume text:\n${text}\n\nReturn a JSON object with this exact structure:\n{\n  \"personalInfo\": {\n    \"fullName\": \"string\",\n    \"email\": \"string\",\n    \"phone\": \"string\",\n    \"location\": \"string\",\n    \"linkedin\": \"string\",\n    \"website\": \"string\",\n    \"summary\": \"string\"\n  },\n  \"experience\": [\n    {\n      \"id\": \"unique-id\",\n      \"company\": \"string\",\n      \"position\": \"string\",\n      \"startDate\": \"YYYY-MM\",\n      \"endDate\": \"YYYY-MM or empty if current\",\n      \"current\": boolean,\n      \"description\": \"string\"\n    }\n  ],\n  \"education\": [\n    {\n      \"id\": \"unique-id\",\n      \"institution\": \"string\",\n      \"degree\": \"string\",\n      \"field\": \"string\",\n      \"startDate\": \"YYYY-MM\",\n      \"endDate\": \"YYYY-MM or empty if current\",\n      \"current\": boolean\n    }\n  ],\n  \"skills\": [\"skill1\", \"skill2\", \"skill3\"]\n}`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    config: {\n      responseMimeType: \"application/json\",\n    },\n    contents: prompt,\n  });\n\n  const jsonText = response.text;\n  return JSON.parse(jsonText);\n}\n\nexport async function generateResumeContent(data: any): Promise<string> {\n  const prompt = `You are a professional resume writer. Based on the following information, generate polished, professional content that highlights achievements and uses action verbs.\n\nPersonal Info:\n${JSON.stringify(data.personalInfo, null, 2)}\n\nExperience:\n${JSON.stringify(data.experience, null, 2)}\n\nEducation:\n${JSON.stringify(data.education, null, 2)}\n\nSkills:\n${JSON.stringify(data.skills, null, 2)}\n\nEnhance the descriptions to be more impactful and achievement-oriented. Return the enhanced data in the same JSON structure.`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    config: {\n      responseMimeType: \"application/json\",\n    },\n    contents: prompt,\n  });\n\n  return response.text || \"{}\";\n}\n\nexport async function generateCoverLetter(data: {\n  personalInfo: any;\n  companyName: string;\n  position: string;\n  jobDescription?: string;\n  experience?: any[];\n  skills?: string[];\n}): Promise<string> {\n  const prompt = `You are a professional cover letter writer. Create a compelling cover letter for:\n\nApplicant: ${data.personalInfo.fullName}\nPosition: ${data.position}\nCompany: ${data.companyName}\n${data.jobDescription ? `Job Description: ${data.jobDescription}` : ''}\n\nApplicant's Experience:\n${JSON.stringify(data.experience || [], null, 2)}\n\nApplicant's Skills:\n${data.skills?.join(', ') || 'Not provided'}\n\nWrite a professional, engaging cover letter that:\n1. Shows genuine interest in the company and position\n2. Highlights relevant experience and skills\n3. Demonstrates value the applicant can bring\n4. Is concise (3-4 paragraphs)\n5. Has a strong opening and closing\n\nReturn only the cover letter text, no JSON.`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    contents: prompt,\n  });\n\n  return response.text || \"\";\n}\n\nexport async function calculateJobMatch(resume: any, jobDescription: string): Promise<number> {\n  const prompt = `You are a job matching expert. Calculate how well this resume matches the job description.\n\nResume Summary:\n- Skills: ${resume.skills?.join(', ')}\n- Experience: ${resume.experience?.map((e: any) => e.position).join(', ')}\n- Education: ${resume.education?.map((e: any) => `${e.degree} in ${e.field}`).join(', ')}\n\nJob Description:\n${jobDescription}\n\nReturn a JSON object with a match score from 0-100:\n{\"matchScore\": number}`;\n\n  const response = await ai.models.generateContent({\n    model: \"gemini-2.5-flash\",\n    config: {\n      responseMimeType: \"application/json\",\n      responseSchema: {\n        type: \"object\",\n        properties: {\n          matchScore: { type: \"number\" },\n        },\n        required: [\"matchScore\"],\n      },\n    },\n    contents: prompt,\n  });\n\n  const result = JSON.parse(response.text || '{\"matchScore\": 0}');\n  return result.matchScore;\n}\n","size_bytes":4318},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"replit.md":{"content":"# Job-Lander - AI Resume Builder\n\n## Project Overview\nJob-Lander is a full-stack web application that helps users create professional AI-generated resumes, cover letters, and find jobs using:\n- **Gemini AI** for content generation and resume parsing\n- **Canva Connect API** for professional templates\n- **Blockchain (Polygon Mumbai)** for resume verification\n- **JSearch API** for job search\n\n## Tech Stack\n- **Frontend**: React, Vite, TypeScript, TailwindCSS, Wouter, React Query, Shadcn UI\n- **Backend**: Node.js, Express, Gemini AI, ethers.js, Multer\n- **Database**: PostgreSQL (Neon) with Drizzle ORM\n- **Authentication**: Replit Auth (OpenID Connect)\n- **Storage**: DatabaseStorage (PostgreSQL)\n- **Blockchain**: Polygon Mumbai Testnet\n\n## Architecture\n\n### Frontend Pages\n1. **Home (/)** - Landing page with hero, features, how-it-works, CTA\n2. **Create Resume (/create)** - Multi-step form with AI parsing and live preview\n3. **Templates (/templates)** - Gallery of Canva templates with filters\n4. **Dashboard (/dashboard)** - User's resume history with delete/download (protected)\n5. **Verify (/verify)** - Blockchain verification interface\n6. **Jobs (/jobs)** - Job search with AI matching\n\n### Backend API Endpoints\n**Authentication (Replit Auth)**\n- `GET /api/login` - Start authentication flow\n- `GET /api/logout` - End session\n- `GET /api/callback` - OAuth callback\n- `GET /api/auth/user` - Get current user (protected)\n\n**Resumes**\n- `POST /api/parse-resume` - Parse PDF/DOCX with AI\n- `POST /api/generate-resume` - Generate enhanced resume (protected)\n- `GET /api/resumes` - Get user's resumes (protected)\n- `GET /api/resumes/:id` - Get single resume\n- `PATCH /api/resumes/:id` - Update resume (protected)\n- `DELETE /api/resumes/:id` - Delete resume (protected)\n\n**Cover Letters & Jobs**\n- `POST /api/generate-coverletter` - Create AI cover letter\n- `GET /api/find-jobs` - Search jobs with JSearch API\n\n**Blockchain & Templates**\n- `POST /api/verify-on-chain` - Blockchain verification\n- `POST /api/verify-resume` - Check verification status\n- `GET /api/canva/templates` - Get templates\n- `POST /api/canva/create-template` - Create design\n- `POST /api/canva/export-pdf` - Export PDF\n\n### Data Models (shared/schema.ts)\n- **User**: ID, email, name, profile image (Replit Auth)\n- **Resume**: User ID, personal info, experience, education, skills, template, blockchain hash\n- **CoverLetter**: Resume link, company, position, AI-generated content\n- **Job**: Title, company, location, description, salary, AI match score\n- **Session**: Authentication session storage\n\n## Key Features\n\n### AI-Powered Resume Creation\n1. User uploads existing resume (PDF/DOCX)\n2. Gemini AI parses and extracts structured data\n3. User reviews/edits information in multi-step form\n4. AI enhances content with professional writing\n5. Select Canva template for design\n6. Download professional PDF resume\n\n### Blockchain Verification\n1. Generate SHA-256 hash of resume\n2. Store hash on Polygon Mumbai testnet\n3. Return transaction hash for verification\n4. Anyone can verify resume authenticity by checking hash\n\n### Job Search\n1. Search jobs using JSearch API\n2. AI calculates match score based on resume\n3. Display jobs with match percentages\n4. Direct application links\n\n## Environment Variables\n- `GEMINI_API_KEY` - AI content generation\n- `CANVA_CLIENT_ID`, `CANVA_CLIENT_SECRET` - Template management\n- `WEB3_RPC_URL` - Blockchain connection\n- `JSEARCH_API_KEY` - Job search\n- `SESSION_SECRET` - Session management\n\n## User Preferences\n- **Design**: Canva-inspired clean UI with dark mode default\n- **Color Scheme**: Purple-blue primary (#8B85FF), professional and modern\n- **Font**: Inter for all text\n- **Spacing**: Generous padding and spacing for readability\n- **Interactions**: Smooth transitions and hover effects\n\n## Recent Changes\n- 2025-10-12: Database & Authentication Implementation\n  - Migrated from MemStorage to PostgreSQL with Drizzle ORM\n  - Integrated Replit Auth for user management\n  - Added user authentication with protected routes\n  - Created Dashboard page for resume history management\n  - Implemented user-specific resume storage with CRUD operations\n  - Added login/logout UI in header with user dropdown\n- 2025-01: Initial MVP Implementation\n  - Complete frontend with 5 pages\n  - Full backend API with AI, blockchain, and job search\n  - Dark mode with theme toggle\n  - Responsive design across all pages\n\n## Development Notes\n- Using PostgreSQL database for persistent storage\n- Replit Auth handles all authentication flows (Google, GitHub, email)\n- Protected routes require authentication via middleware\n- User sessions stored in database for persistence\n- Blockchain verification simulated for MVP (no actual contract deployment needed)\n- Canva integration uses mock data (requires OAuth setup for full integration)\n- All AI features powered by Gemini 2.5 Flash/Pro models\n\n## Running the App\n```bash\nnpm run dev  # Starts both frontend and backend on port 5000\n```\n\n## Next Steps (In Progress)\n- ✅ Add persistent PostgreSQL database\n- ✅ Implement user authentication\n- ✅ Add resume history dashboard\n- 🔄 Advanced AI features (job tailoring, skill gap analysis, interview prep)\n- 🔄 Collaborative sharing features for teams\n- 🔄 Batch processing for multiple job applications\n- 🔄 Analytics dashboard with charts\n- ⏳ Deploy smart contract to Polygon Mumbai\n- ⏳ Complete Canva OAuth integration\n","size_bytes":5435},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Sparkles, FileText, Shield, Search, CheckCircle2, Upload, Wand2, Download } from \"lucide-react\";\nimport heroImage from \"@assets/stock_images/modern_office_desk_w_94f20872.jpg\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-[90vh] flex items-center justify-center overflow-hidden\">\n        {/* Hero Background Image with Dark Overlay */}\n        <div className=\"absolute inset-0 z-0\">\n          <div className=\"absolute inset-0 bg-gradient-to-b from-background/60 via-background/80 to-background z-10\" />\n          <img\n            src={heroImage}\n            alt=\"Professional workspace\"\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n\n        {/* Hero Content */}\n        <div className=\"container relative z-20 mx-auto px-4 md:px-6 text-center\">\n          <Badge className=\"mb-6 bg-primary/20 text-primary border-primary/30 hover:bg-primary/30\" data-testid=\"badge-hero\">\n            <Sparkles className=\"h-3 w-3 mr-1\" />\n            AI-Powered & Blockchain Verified\n          </Badge>\n          \n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-foreground\">\n            Land Your Dream Job with\n            <br />\n            <span className=\"text-primary\">AI-Powered Precision</span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            Create professional resumes and cover letters in minutes using AI. \n            Choose from stunning Canva templates and verify authenticity with blockchain technology.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Button asChild size=\"lg\" className=\"text-lg px-8 py-6\" data-testid=\"button-create-resume-hero\">\n              <Link href=\"/create\">\n                Create Resume\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button \n              asChild\n              size=\"lg\" \n              variant=\"outline\" \n              className=\"text-lg px-8 py-6 bg-background/60 backdrop-blur-sm border-2\"\n              data-testid=\"button-view-templates-hero\"\n            >\n              <Link href=\"/templates\">View Templates</Link>\n            </Button>\n          </div>\n\n          <div className=\"mt-12\">\n            <Badge variant=\"secondary\" className=\"bg-card/60 backdrop-blur-sm\" data-testid=\"badge-trust\">\n              <CheckCircle2 className=\"h-4 w-4 mr-2 text-chart-3\" />\n              10,000+ Resumes Created\n            </Badge>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 md:py-32 bg-card\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              Everything You Need to Stand Out\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Powerful features designed to help you create the perfect resume and land your dream job\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"p-8 hover-elevate transition-all hover:scale-105\" data-testid=\"card-feature-ai\">\n              <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center mb-6\">\n                <Sparkles className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">AI Content Generation</h3>\n              <p className=\"text-muted-foreground\">\n                Powered by Gemini AI to create compelling resumes and cover letters tailored to your experience and the job you want.\n              </p>\n            </Card>\n\n            <Card className=\"p-8 hover-elevate transition-all hover:scale-105\" data-testid=\"card-feature-templates\">\n              <div className=\"h-12 w-12 rounded-lg bg-chart-2/10 flex items-center justify-center mb-6\">\n                <FileText className=\"h-6 w-6 text-chart-2\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Professional Templates</h3>\n              <p className=\"text-muted-foreground\">\n                Access 50+ stunning resume templates powered by Canva. Choose from modern, classic, creative, and professional designs.\n              </p>\n            </Card>\n\n            <Card className=\"p-8 hover-elevate transition-all hover:scale-105\" data-testid=\"card-feature-blockchain\">\n              <div className=\"h-12 w-12 rounded-lg bg-chart-3/10 flex items-center justify-center mb-6\">\n                <Shield className=\"h-6 w-6 text-chart-3\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Blockchain Verification</h3>\n              <p className=\"text-muted-foreground\">\n                Verify resume authenticity with blockchain technology. Hash your credentials on Polygon Mumbai testnet for tamper-proof verification.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section className=\"py-20 md:py-32\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Create your professional resume in 4 simple steps\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 relative\">\n            {/* Connecting lines for desktop */}\n            <div className=\"hidden md:block absolute top-12 left-0 right-0 h-0.5 bg-border\" style={{ width: 'calc(100% - 8rem)', left: '4rem' }} />\n\n            <div className=\"relative text-center\" data-testid=\"step-upload\">\n              <div className=\"h-24 w-24 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-6 text-3xl font-bold relative z-10\">\n                1\n              </div>\n              <div className=\"absolute top-8 left-1/2 -translate-x-1/2 h-12 w-12 rounded-full bg-primary/20 flex items-center justify-center\">\n                <Upload className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Upload Resume</h3>\n              <p className=\"text-muted-foreground\">\n                Upload your existing resume or start from scratch\n              </p>\n            </div>\n\n            <div className=\"relative text-center\" data-testid=\"step-ai\">\n              <div className=\"h-24 w-24 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-6 text-3xl font-bold relative z-10\">\n                2\n              </div>\n              <div className=\"absolute top-8 left-1/2 -translate-x-1/2 h-12 w-12 rounded-full bg-chart-2/20 flex items-center justify-center\">\n                <Wand2 className=\"h-6 w-6 text-chart-2\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">AI Enhancement</h3>\n              <p className=\"text-muted-foreground\">\n                Let AI parse and enhance your content automatically\n              </p>\n            </div>\n\n            <div className=\"relative text-center\" data-testid=\"step-template\">\n              <div className=\"h-24 w-24 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-6 text-3xl font-bold relative z-10\">\n                3\n              </div>\n              <div className=\"absolute top-8 left-1/2 -translate-x-1/2 h-12 w-12 rounded-full bg-chart-4/20 flex items-center justify-center\">\n                <FileText className=\"h-6 w-6 text-chart-4\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Choose Template</h3>\n              <p className=\"text-muted-foreground\">\n                Select from 50+ professional Canva templates\n              </p>\n            </div>\n\n            <div className=\"relative text-center\" data-testid=\"step-download\">\n              <div className=\"h-24 w-24 rounded-full bg-primary text-primary-foreground flex items-center justify-center mx-auto mb-6 text-3xl font-bold relative z-10\">\n                4\n              </div>\n              <div className=\"absolute top-8 left-1/2 -translate-x-1/2 h-12 w-12 rounded-full bg-chart-3/20 flex items-center justify-center\">\n                <Download className=\"h-6 w-6 text-chart-3\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-3\">Download & Verify</h3>\n              <p className=\"text-muted-foreground\">\n                Download PDF and verify on blockchain\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Job Search CTA */}\n      <section className=\"py-20 md:py-32 bg-card\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <Card className=\"p-12 text-center bg-gradient-to-br from-primary/10 to-chart-2/10 border-primary/20\">\n            <Search className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              Find Your Perfect Job\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Browse thousands of job listings powered by AI matching to find opportunities that fit your skills and experience\n            </p>\n            <Button asChild size=\"lg\" className=\"text-lg px-8 py-6\" data-testid=\"button-search-jobs\">\n              <Link href=\"/jobs\">\n                Search Jobs\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n          </Card>\n        </div>\n      </section>\n\n      {/* Final CTA Section */}\n      <section className=\"py-20 md:py-32\">\n        <div className=\"container mx-auto px-4 md:px-6 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Ready to Transform Your Job Search?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of professionals who have landed their dream jobs with Job-Lander\n          </p>\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n            <Button asChild size=\"lg\" className=\"text-lg px-8 py-6\" data-testid=\"button-get-started-cta\">\n              <Link href=\"/create\">\n                Get Started Free\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button asChild size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-6\" data-testid=\"button-browse-templates\">\n              <Link href=\"/templates\">Browse Templates</Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card\">\n        <div className=\"container mx-auto px-4 md:px-6 py-12\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n            <div>\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Sparkles className=\"h-6 w-6 text-primary\" />\n                <span className=\"text-xl font-bold\">Job-Lander</span>\n              </div>\n              <p className=\"text-muted-foreground\">\n                AI-powered resume builder with blockchain verification\n              </p>\n            </div>\n\n            <div>\n              <h3 className=\"font-bold mb-4\">Product</h3>\n              <ul className=\"space-y-2\">\n                <li>\n                  <Link href=\"/create\" className=\"text-muted-foreground hover:text-foreground transition-colors cursor-pointer focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring rounded-sm\" data-testid=\"link-footer-create\">\n                    Create Resume\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/templates\" className=\"text-muted-foreground hover:text-foreground transition-colors cursor-pointer focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring rounded-sm\" data-testid=\"link-footer-templates\">\n                    Templates\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/verify\" className=\"text-muted-foreground hover:text-foreground transition-colors cursor-pointer focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring rounded-sm\" data-testid=\"link-footer-verify\">\n                    Verify Resume\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/jobs\" className=\"text-muted-foreground hover:text-foreground transition-colors cursor-pointer focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring rounded-sm\" data-testid=\"link-footer-jobs\">\n                    Find Jobs\n                  </Link>\n                </li>\n              </ul>\n            </div>\n\n            <div>\n              <h3 className=\"font-bold mb-4\">Resources</h3>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>Documentation</li>\n                <li>Blog</li>\n                <li>Help Center</li>\n                <li>Privacy Policy</li>\n              </ul>\n            </div>\n\n            <div>\n              <h3 className=\"font-bold mb-4\">Company</h3>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>About Us</li>\n                <li>Careers</li>\n                <li>Contact</li>\n                <li>Partners</li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border pt-8 flex flex-col md:flex-row justify-between items-center gap-4\">\n            <p className=\"text-muted-foreground\">\n              © 2025 Job-Lander. All rights reserved.\n            </p>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"outline\" className=\"gap-2\" data-testid=\"badge-footer-blockchain\">\n                <Shield className=\"h-3 w-3\" />\n                Blockchain Verified\n              </Badge>\n              <Badge variant=\"outline\" className=\"gap-2\" data-testid=\"badge-footer-ai\">\n                <Sparkles className=\"h-3 w-3\" />\n                AI Powered\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14746},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/services/jobs.ts":{"content":"import type { Job } from \"@shared/schema\";\n\nexport async function searchJobs(query: string, location?: string): Promise<{ data: Job[] }> {\n  try {\n    if (!process.env.JSEARCH_API_KEY) {\n      console.warn(\"JSEARCH_API_KEY not configured, using mock data\");\n      return { data: [] };\n    }\n\n    const params = new URLSearchParams({\n      query: query,\n      ...(location && { location }),\n      num_pages: \"1\",\n    });\n\n    const response = await fetch(\n      `https://jsearch.p.rapidapi.com/search?${params}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"X-RapidAPI-Key\": process.env.JSEARCH_API_KEY,\n          \"X-RapidAPI-Host\": \"jsearch.p.rapidapi.com\",\n        },\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`JSearch API error: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    \n    // Transform JSearch data to our Job schema\n    const jobs: Job[] = (data.data || []).map((job: any) => ({\n      id: job.job_id,\n      title: job.job_title,\n      company: job.employer_name,\n      location: job.job_city || job.job_state || job.job_country || \"Remote\",\n      description: job.job_description || \"\",\n      salary: job.job_salary || \"\",\n      postedDate: job.job_posted_at_datetime_utc || \"\",\n      jobUrl: job.job_apply_link || job.job_google_link || \"\",\n      aiMatchScore: null,\n    }));\n\n    return { data: jobs };\n  } catch (error) {\n    console.error(\"Job search error:\", error);\n    return { data: [] };\n  }\n}\n","size_bytes":1480},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { Header } from \"@/components/header\";\nimport Home from \"@/pages/home\";\nimport CreateResume from \"@/pages/create-resume\";\nimport Templates from \"@/pages/templates\";\nimport Verify from \"@/pages/verify\";\nimport Jobs from \"@/pages/jobs\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/create\" component={CreateResume} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/verify\" component={Verify} />\n      <Route path=\"/jobs\" component={Jobs} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <div className=\"min-h-screen flex flex-col\">\n            <Header />\n            <main className=\"flex-1\">\n              <Router />\n            </main>\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1500},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { FileText, Search, Eye, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nconst TEMPLATE_CATEGORIES = [\"All\", \"Modern\", \"Classic\", \"Creative\", \"Professional\", \"Minimalist\"];\n\ninterface Template {\n  id: string;\n  name: string;\n  category: string;\n  thumbnailUrl?: string;\n}\n\nexport default function Templates() {\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null);\n  const [previewOpen, setPreviewOpen] = useState(false);\n\n  const { data: templatesData, isLoading } = useQuery({\n    queryKey: [\"/api/canva/templates\"],\n  });\n\n  const templates: Template[] = templatesData || [];\n\n  const filteredTemplates = templates.filter(template => {\n    const matchesCategory = selectedCategory === \"All\" || template.category === selectedCategory;\n    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const handlePreview = (template: Template) => {\n    setSelectedTemplate(template);\n    setPreviewOpen(true);\n  };\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Resume Templates</h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Choose from 50+ professional templates powered by Canva\n          </p>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"mb-8 space-y-4\">\n          <div className=\"relative max-w-md mx-auto\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search templates...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-templates\"\n            />\n          </div>\n\n          <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3 md:grid-cols-6\">\n              {TEMPLATE_CATEGORIES.map(category => (\n                <TabsTrigger key={category} value={category} data-testid={`tab-${category.toLowerCase()}`}>\n                  {category}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n          </Tabs>\n        </div>\n\n        {/* Templates Grid */}\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : filteredTemplates.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template) => (\n              <Card\n                key={template.id}\n                className=\"group overflow-hidden hover-elevate transition-all hover:scale-105\"\n                data-testid={`card-template-${template.id}`}\n              >\n                {/* Template Preview */}\n                <div className=\"aspect-[8.5/11] bg-muted relative overflow-hidden\">\n                  <div className=\"absolute inset-0 flex items-center justify-center bg-card\">\n                    <FileText className=\"h-24 w-24 text-muted-foreground/20\" />\n                  </div>\n                  \n                  {/* Overlay on Hover */}\n                  <div className=\"absolute inset-0 bg-background/80 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center gap-2\">\n                    <Button\n                      onClick={() => handlePreview(template)}\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      data-testid={`button-preview-${template.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      Preview\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Template Info */}\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <h3 className=\"font-bold text-lg\" data-testid={`text-template-name-${template.id}`}>\n                      {template.name}\n                    </h3>\n                    <Badge variant=\"outline\" data-testid={`badge-category-${template.id}`}>\n                      {template.category}\n                    </Badge>\n                  </div>\n\n                  <Button asChild className=\"w-full\" data-testid={`button-use-template-${template.id}`}>\n                    <Link href={`/create?template=${template.id}`}>Use Template</Link>\n                  </Button>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <FileText className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <h3 className=\"text-xl font-bold mb-2\">No templates found</h3>\n            <p className=\"text-muted-foreground\">\n              Try adjusting your search or filter criteria\n            </p>\n          </div>\n        )}\n\n        {/* Preview Dialog */}\n        <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>{selectedTemplate?.name}</DialogTitle>\n              <DialogDescription>\n                {selectedTemplate?.category} template - Professional resume design powered by Canva\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"aspect-[8.5/11] bg-muted rounded-lg flex items-center justify-center\">\n              <FileText className=\"h-32 w-32 text-muted-foreground/20\" />\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button asChild className=\"w-full\" data-testid=\"button-use-template-preview\">\n                <Link href={`/create?template=${selectedTemplate?.id}`}>Use This Template</Link>\n              </Button>\n              <Button variant=\"outline\" onClick={() => setPreviewOpen(false)} className=\"flex-1\">\n                Close\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6913},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"job-lander-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1606},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"README.md":{"content":"# Job-Lander 🚀\n\n> AI-Powered Resume Builder with Blockchain Verification\n\nJob-Lander is a modern, full-stack web application that helps job seekers create professional resumes using AI-powered content generation, stunning Canva templates, and blockchain-verified credentials.\n\n## ✨ Features\n\n### 🤖 AI-Powered Content Generation\n- Automatic resume parsing from PDF/DOCX files using Gemini AI\n- Intelligent content enhancement and professional writing\n- AI-generated cover letters tailored to specific jobs\n- Smart job matching with AI-powered scoring\n\n### 🎨 Professional Templates\n- 50+ professional resume templates powered by Canva\n- Multiple categories: Modern, Classic, Creative, Professional, Minimalist\n- Real-time preview and customization\n- One-click template application\n\n### 🔐 Blockchain Verification\n- Resume authenticity verification using blockchain technology\n- Cryptographic hash storage on Polygon Mumbai testnet\n- Tamper-proof credentials\n- Shareable verification links\n\n### 💼 Job Search Integration\n- Live job search powered by JSearch API\n- AI match scoring for job recommendations\n- Filter by location and keywords\n- Direct application links\n\n### 🌓 Modern UI/UX\n- Beautiful dark mode support\n- Responsive design for all devices\n- Smooth animations and transitions\n- Canva-inspired clean interface\n\n## 🛠️ Technology Stack\n\n### Frontend\n- **React** with **Vite** for blazing-fast development\n- **TypeScript** for type safety\n- **TailwindCSS** for modern styling\n- **Wouter** for routing\n- **React Query** for data fetching\n- **Shadcn UI** for beautiful components\n\n### Backend\n- **Node.js** with **Express**\n- **Gemini AI** (Google) for content generation\n- **Canva Connect API** for template management\n- **ethers.js** for blockchain integration\n- **Multer** for file uploads\n- **pdf-parse** & **mammoth** for document parsing\n\n### Blockchain\n- **Polygon Mumbai Testnet** for verification\n- **Solidity** smart contracts for hash storage\n- **ethers.js** for Web3 interactions\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 18+ installed\n- API keys for:\n  - Gemini AI\n  - Canva Connect\n  - JSearch (RapidAPI)\n  - Polygon Mumbai RPC (Alchemy/Infura)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <your-repo-url>\n   cd job-lander\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` and add your API keys:\n   - `GEMINI_API_KEY`: Get from https://aistudio.google.com/apikey\n   - `CANVA_CLIENT_ID` & `CANVA_CLIENT_SECRET`: Get from https://www.canva.com/developers\n   - `WEB3_RPC_URL`: Get from https://www.alchemy.com/ or https://infura.io/\n   - `JSEARCH_API_KEY`: Get from https://rapidapi.com/letscrape-6bRBa3QguO5/api/jsearch\n   - `SESSION_SECRET`: Any random string\n\n4. **Run the development server**\n   ```bash\n   npm run dev\n   ```\n\n5. **Open your browser**\n   Navigate to `http://localhost:5000`\n\n## 📁 Project Structure\n\n```\njob-lander/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── lib/           # Utilities and helpers\n│   │   └── App.tsx        # Main app component\n│   └── index.html\n├── server/                # Backend Express application\n│   ├── services/         # Business logic\n│   │   ├── gemini.ts     # AI content generation\n│   │   ├── blockchain.ts # Blockchain verification\n│   │   ├── canva.ts      # Template management\n│   │   └── jobs.ts       # Job search\n│   ├── routes.ts         # API routes\n│   └── storage.ts        # Data persistence\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # TypeScript types and Zod schemas\n├── .env.example          # Environment variables template\n├── package.json\n└── README.md\n```\n\n## 🔌 API Endpoints\n\n### Resume Management\n- `POST /api/parse-resume` - Parse resume from PDF/DOCX\n- `POST /api/generate-resume` - Generate enhanced resume\n- `GET /api/resumes` - Get all resumes\n- `GET /api/resumes/:id` - Get single resume\n\n### Cover Letters\n- `POST /api/generate-coverletter` - Generate AI cover letter\n\n### Blockchain Verification\n- `POST /api/verify-on-chain` - Create blockchain verification\n- `POST /api/verify-resume` - Check if resume is verified\n\n### Job Search\n- `GET /api/find-jobs?query=...&location=...` - Search jobs\n\n### Canva Templates\n- `GET /api/canva/templates` - Get available templates\n- `POST /api/canva/create-template` - Create design from template\n- `POST /api/canva/export-pdf` - Export design as PDF\n\n## 🔐 Blockchain Smart Contract\n\nThe application uses a Solidity smart contract to store resume hashes on Polygon Mumbai testnet:\n\n```solidity\n// ResumeHashStorage.sol\n// Stores cryptographic hashes of resumes for verification\n// Each hash is timestamped and linked to the creator's address\n```\n\n### Deploying the Smart Contract\n\n1. Install Hardhat (optional, for deployment):\n   ```bash\n   npm install --save-dev hardhat\n   ```\n\n2. Deploy to Polygon Mumbai:\n   ```bash\n   npx hardhat run scripts/deploy.js --network mumbai\n   ```\n\n3. Update `.env` with the contract address:\n   ```\n   HASH_STORAGE_CONTRACT=0x...\n   ```\n\n## 🌐 Deployment\n\n### Deploy to Vercel\n\n1. **Install Vercel CLI**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Deploy**\n   ```bash\n   vercel\n   ```\n\n3. **Set environment variables in Vercel dashboard**\n\n### Deploy to AWS\n\n1. Build the application:\n   ```bash\n   npm run build\n   ```\n\n2. Deploy using AWS Elastic Beanstalk or EC2\n3. Configure environment variables in AWS Console\n\n## 🧪 Testing\n\nRun tests (when implemented):\n```bash\nnpm test\n```\n\n## 📝 Usage Guide\n\n### Creating a Resume\n\n1. **Navigate to \"Create Resume\"**\n2. **Upload existing resume** (optional) - AI will parse it automatically\n3. **Fill in personal information**\n4. **Add work experience** - Use the \"Add\" button to include multiple positions\n5. **Add education** - Include your academic background\n6. **Add skills** - List your technical and soft skills\n7. **Preview your resume** - See live updates\n8. **Generate resume** - Click to create enhanced version with AI\n9. **Download PDF** - Get your professional resume\n\n### Verifying a Resume\n\n1. **Go to \"Verify\" page**\n2. **Upload your resume PDF**\n3. **Click \"Create New Verification\"** - This stores a hash on the blockchain\n4. **Save the transaction hash** - Use it to prove authenticity\n5. **Share verification link** - Anyone can verify your resume's authenticity\n\n### Searching for Jobs\n\n1. **Navigate to \"Find Jobs\"**\n2. **Enter job title or keywords**\n3. **Optional: Add location**\n4. **Click Search**\n5. **View AI match scores** - See how well jobs match your profile\n6. **Click \"Apply Now\"** - Opens job application page\n\n## 🤝 Contributing\n\nContributions are welcome! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n## 🙏 Acknowledgments\n\n- **Gemini AI** by Google for powerful content generation\n- **Canva** for beautiful design templates\n- **Polygon** for blockchain infrastructure\n- **Shadcn UI** for component library\n- **JSearch API** for job listings\n\n## 📧 Support\n\nFor issues, questions, or suggestions:\n- Open an issue on GitHub\n- Email: support@job-lander.com\n\n## 🗺️ Roadmap\n\n- [ ] User authentication with Clerk/Firebase\n- [ ] Resume history and management dashboard\n- [ ] Advanced AI features (job description tailoring, skill gap analysis)\n- [ ] Collaborative resume sharing\n- [ ] Batch resume generation\n- [ ] Analytics dashboard\n- [ ] Mobile app (React Native)\n\n---\n\nBuilt with ❤️ for job seekers everywhere\n","size_bytes":8100},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/pages/create-resume.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { personalInfoSchema, experienceSchema, educationSchema, type PersonalInfo, type Experience, type Education } from \"@shared/schema\";\nimport { Upload, Sparkles, FileText, Download, Loader2, Plus, Trash2, CheckCircle } from \"lucide-react\";\nimport { nanoid } from \"nanoid\";\n\nexport default function CreateResume() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [parsedData, setParsedData] = useState<any>(null);\n  const [experiences, setExperiences] = useState<Experience[]>([]);\n  const [educations, setEducations] = useState<Education[]>([]);\n  const [skills, setSkills] = useState<string[]>([]);\n  const [newSkill, setNewSkill] = useState(\"\");\n  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);\n  const [resumeId, setResumeId] = useState<string | null>(null);\n  \n  const { toast } = useToast();\n\n  const steps = [\"Upload\", \"Personal Info\", \"Experience\", \"Education\", \"Skills\", \"Preview\"];\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  // Personal Info Form\n  const personalForm = useForm<PersonalInfo>({\n    resolver: zodResolver(personalInfoSchema),\n    defaultValues: {\n      fullName: \"\",\n      email: \"\",\n      phone: \"\",\n      location: \"\",\n      linkedin: \"\",\n      website: \"\",\n      summary: \"\",\n    },\n  });\n\n  // Parse resume mutation\n  const parseResumeMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      return apiRequest(\"POST\", \"/api/parse-resume\", formData);\n    },\n    onSuccess: (data) => {\n      setParsedData(data);\n      if (data.personalInfo) {\n        personalForm.reset(data.personalInfo);\n      }\n      if (data.experience) {\n        setExperiences(data.experience);\n      }\n      if (data.education) {\n        setEducations(data.education);\n      }\n      if (data.skills) {\n        setSkills(data.skills);\n      }\n      toast({\n        title: \"Resume Parsed Successfully\",\n        description: \"Your resume has been analyzed by AI. Review and edit the extracted information.\",\n      });\n      setCurrentStep(1);\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Parse Failed\",\n        description: \"Failed to parse resume. Please try again or enter information manually.\",\n      });\n      setCurrentStep(1);\n    },\n  });\n\n  // Generate resume mutation\n  const generateResumeMutation = useMutation({\n    mutationFn: async () => {\n      const data = {\n        personalInfo: personalForm.getValues(),\n        experience: experiences,\n        education: educations,\n        skills,\n        templateId: selectedTemplate,\n      };\n      return apiRequest(\"POST\", \"/api/generate-resume\", data);\n    },\n    onSuccess: (data) => {\n      setResumeId(data.id);\n      toast({\n        title: \"Resume Generated!\",\n        description: \"Your professional resume is ready to download.\",\n      });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"Generation Failed\",\n        description: \"Failed to generate resume. Please try again.\",\n      });\n    },\n  });\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setUploadedFile(file);\n      parseResumeMutation.mutate(file);\n    }\n  };\n\n  const addExperience = () => {\n    setExperiences([...experiences, {\n      id: nanoid(),\n      company: \"\",\n      position: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      current: false,\n      description: \"\",\n    }]);\n  };\n\n  const updateExperience = (id: string, field: keyof Experience, value: any) => {\n    setExperiences(experiences.map(exp => \n      exp.id === id ? { ...exp, [field]: value } : exp\n    ));\n  };\n\n  const removeExperience = (id: string) => {\n    setExperiences(experiences.filter(exp => exp.id !== id));\n  };\n\n  const addEducation = () => {\n    setEducations([...educations, {\n      id: nanoid(),\n      institution: \"\",\n      degree: \"\",\n      field: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      current: false,\n    }]);\n  };\n\n  const updateEducation = (id: string, field: keyof Education, value: any) => {\n    setEducations(educations.map(edu => \n      edu.id === id ? { ...edu, [field]: value } : edu\n    ));\n  };\n\n  const removeEducation = (id: string) => {\n    setEducations(educations.filter(edu => edu.id !== id));\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim()) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (index: number) => {\n    setSkills(skills.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"min-h-screen py-12\">\n      <div className=\"container mx-auto px-4 md:px-6 max-w-7xl\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Create Your Resume</h1>\n          <p className=\"text-xl text-muted-foreground\">\n            Upload your existing resume or create a new one from scratch\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Step {currentStep + 1} of {steps.length}</span>\n            <span className=\"text-sm text-muted-foreground\">{steps[currentStep]}</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" data-testid=\"progress-resume\" />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Left Side - Form */}\n          <div>\n            <Card className=\"p-6\">\n              {/* Step 0: Upload */}\n              {currentStep === 0 && (\n                <div className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <h2 className=\"text-2xl font-bold mb-4\">Upload Your Resume</h2>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Upload an existing resume for AI parsing, or skip to create from scratch\n                    </p>\n                  </div>\n\n                  <div className=\"border-2 border-dashed border-border rounded-lg p-12 text-center hover-elevate transition-all\">\n                    <input\n                      type=\"file\"\n                      accept=\".pdf,.doc,.docx\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"resume-upload\"\n                      data-testid=\"input-resume-upload\"\n                    />\n                    <label htmlFor=\"resume-upload\" className=\"cursor-pointer\">\n                      <Upload className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <p className=\"text-lg font-medium mb-2\">\n                        {uploadedFile ? uploadedFile.name : \"Click to upload or drag and drop\"}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        PDF, DOC, or DOCX (max 10MB)\n                      </p>\n                    </label>\n                  </div>\n\n                  {parseResumeMutation.isPending && (\n                    <div className=\"flex items-center justify-center gap-3 text-primary\">\n                      <Loader2 className=\"h-5 w-5 animate-spin\" />\n                      <span>AI is parsing your resume...</span>\n                    </div>\n                  )}\n\n                  <Button\n                    onClick={() => setCurrentStep(1)}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-skip-upload\"\n                  >\n                    Skip and Create Manually\n                  </Button>\n                </div>\n              )}\n\n              {/* Step 1: Personal Info */}\n              {currentStep === 1 && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold\">Personal Information</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"fullName\">Full Name *</Label>\n                      <Input\n                        id=\"fullName\"\n                        {...personalForm.register(\"fullName\")}\n                        data-testid=\"input-fullname\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"email\">Email *</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          {...personalForm.register(\"email\")}\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"phone\">Phone *</Label>\n                        <Input\n                          id=\"phone\"\n                          {...personalForm.register(\"phone\")}\n                          data-testid=\"input-phone\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"location\">Location</Label>\n                      <Input\n                        id=\"location\"\n                        {...personalForm.register(\"location\")}\n                        data-testid=\"input-location\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"linkedin\">LinkedIn</Label>\n                        <Input\n                          id=\"linkedin\"\n                          {...personalForm.register(\"linkedin\")}\n                          data-testid=\"input-linkedin\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"website\">Website</Label>\n                        <Input\n                          id=\"website\"\n                          {...personalForm.register(\"website\")}\n                          data-testid=\"input-website\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"summary\">Professional Summary</Label>\n                      <Textarea\n                        id=\"summary\"\n                        {...personalForm.register(\"summary\")}\n                        rows={4}\n                        data-testid=\"input-summary\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      onClick={() => setCurrentStep(0)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-back-personal\"\n                    >\n                      Back\n                    </Button>\n                    <Button\n                      onClick={() => setCurrentStep(2)}\n                      className=\"flex-1\"\n                      data-testid=\"button-next-personal\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Experience */}\n              {currentStep === 2 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold\">Work Experience</h2>\n                    <Button onClick={addExperience} size=\"sm\" data-testid=\"button-add-experience\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-6 max-h-96 overflow-y-auto\">\n                    {experiences.map((exp, index) => (\n                      <Card key={exp.id} className=\"p-4 space-y-4\" data-testid={`card-experience-${index}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <Badge variant=\"outline\">Experience {index + 1}</Badge>\n                          <Button\n                            onClick={() => removeExperience(exp.id)}\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            data-testid={`button-remove-experience-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <Input\n                            placeholder=\"Company\"\n                            value={exp.company}\n                            onChange={(e) => updateExperience(exp.id, \"company\", e.target.value)}\n                            data-testid={`input-company-${index}`}\n                          />\n                          <Input\n                            placeholder=\"Position\"\n                            value={exp.position}\n                            onChange={(e) => updateExperience(exp.id, \"position\", e.target.value)}\n                            data-testid={`input-position-${index}`}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <Input\n                            type=\"month\"\n                            placeholder=\"Start Date\"\n                            value={exp.startDate}\n                            onChange={(e) => updateExperience(exp.id, \"startDate\", e.target.value)}\n                            data-testid={`input-start-date-${index}`}\n                          />\n                          <Input\n                            type=\"month\"\n                            placeholder=\"End Date\"\n                            value={exp.endDate}\n                            onChange={(e) => updateExperience(exp.id, \"endDate\", e.target.value)}\n                            disabled={exp.current}\n                            data-testid={`input-end-date-${index}`}\n                          />\n                        </div>\n\n                        <Textarea\n                          placeholder=\"Description\"\n                          value={exp.description}\n                          onChange={(e) => updateExperience(exp.id, \"description\", e.target.value)}\n                          rows={3}\n                          data-testid={`input-description-${index}`}\n                        />\n                      </Card>\n                    ))}\n                  </div>\n\n                  {experiences.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No experience added yet. Click \"Add\" to get started.\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      onClick={() => setCurrentStep(1)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-back-experience\"\n                    >\n                      Back\n                    </Button>\n                    <Button\n                      onClick={() => setCurrentStep(3)}\n                      className=\"flex-1\"\n                      data-testid=\"button-next-experience\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 3: Education */}\n              {currentStep === 3 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h2 className=\"text-2xl font-bold\">Education</h2>\n                    <Button onClick={addEducation} size=\"sm\" data-testid=\"button-add-education\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add\n                    </Button>\n                  </div>\n\n                  <div className=\"space-y-6 max-h-96 overflow-y-auto\">\n                    {educations.map((edu, index) => (\n                      <Card key={edu.id} className=\"p-4 space-y-4\" data-testid={`card-education-${index}`}>\n                        <div className=\"flex justify-between items-start\">\n                          <Badge variant=\"outline\">Education {index + 1}</Badge>\n                          <Button\n                            onClick={() => removeEducation(edu.id)}\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-8 w-8\"\n                            data-testid={`button-remove-education-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        <Input\n                          placeholder=\"Institution\"\n                          value={edu.institution}\n                          onChange={(e) => updateEducation(edu.id, \"institution\", e.target.value)}\n                          data-testid={`input-institution-${index}`}\n                        />\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <Input\n                            placeholder=\"Degree\"\n                            value={edu.degree}\n                            onChange={(e) => updateEducation(edu.id, \"degree\", e.target.value)}\n                            data-testid={`input-degree-${index}`}\n                          />\n                          <Input\n                            placeholder=\"Field of Study\"\n                            value={edu.field}\n                            onChange={(e) => updateEducation(edu.id, \"field\", e.target.value)}\n                            data-testid={`input-field-${index}`}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <Input\n                            type=\"month\"\n                            placeholder=\"Start Date\"\n                            value={edu.startDate}\n                            onChange={(e) => updateEducation(edu.id, \"startDate\", e.target.value)}\n                            data-testid={`input-edu-start-${index}`}\n                          />\n                          <Input\n                            type=\"month\"\n                            placeholder=\"End Date\"\n                            value={edu.endDate}\n                            onChange={(e) => updateEducation(edu.id, \"endDate\", e.target.value)}\n                            disabled={edu.current}\n                            data-testid={`input-edu-end-${index}`}\n                          />\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {educations.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No education added yet. Click \"Add\" to get started.\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      onClick={() => setCurrentStep(2)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-back-education\"\n                    >\n                      Back\n                    </Button>\n                    <Button\n                      onClick={() => setCurrentStep(4)}\n                      className=\"flex-1\"\n                      data-testid=\"button-next-education\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 4: Skills */}\n              {currentStep === 4 && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold\">Skills</h2>\n\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add a skill...\"\n                      value={newSkill}\n                      onChange={(e) => setNewSkill(e.target.value)}\n                      onKeyPress={(e) => e.key === \"Enter\" && addSkill()}\n                      data-testid=\"input-skill\"\n                    />\n                    <Button onClick={addSkill} data-testid=\"button-add-skill\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-2\">\n                    {skills.map((skill, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"px-3 py-1 gap-2\"\n                        data-testid={`badge-skill-${index}`}\n                      >\n                        {skill}\n                        <button\n                          onClick={() => removeSkill(index)}\n                          className=\"hover:text-destructive\"\n                          data-testid={`button-remove-skill-${index}`}\n                        >\n                          ×\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n\n                  {skills.length === 0 && (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No skills added yet. Add your skills above.\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-4\">\n                    <Button\n                      onClick={() => setCurrentStep(3)}\n                      variant=\"outline\"\n                      className=\"flex-1\"\n                      data-testid=\"button-back-skills\"\n                    >\n                      Back\n                    </Button>\n                    <Button\n                      onClick={() => setCurrentStep(5)}\n                      className=\"flex-1\"\n                      data-testid=\"button-next-skills\"\n                    >\n                      Preview\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 5: Preview */}\n              {currentStep === 5 && (\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-2xl font-bold\">Preview & Generate</h2>\n\n                  <Button\n                    onClick={() => generateResumeMutation.mutate()}\n                    disabled={generateResumeMutation.isPending}\n                    className=\"w-full\"\n                    data-testid=\"button-generate-resume\"\n                  >\n                    {generateResumeMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Generating...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles className=\"h-4 w-4 mr-2\" />\n                        Generate Resume\n                      </>\n                    )}\n                  </Button>\n\n                  {resumeId && (\n                    <div className=\"space-y-4\">\n                      <Card className=\"p-6 bg-chart-3/10 border-chart-3/20\">\n                        <div className=\"flex items-center gap-3 mb-4\">\n                          <CheckCircle className=\"h-6 w-6 text-chart-3\" />\n                          <h3 className=\"text-lg font-bold\">Resume Generated!</h3>\n                        </div>\n                        <p className=\"text-muted-foreground mb-4\">\n                          Your resume is ready. Download it or verify on blockchain.\n                        </p>\n                        <div className=\"flex gap-2\">\n                          <Button className=\"flex-1\" data-testid=\"button-download-resume\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Download PDF\n                          </Button>\n                          <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-verify-resume\">\n                            <Shield className=\"h-4 w-4 mr-2\" />\n                            Verify\n                          </Button>\n                        </div>\n                      </Card>\n                    </div>\n                  )}\n\n                  <Button\n                    onClick={() => setCurrentStep(4)}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-back-preview\"\n                  >\n                    Back\n                  </Button>\n                </div>\n              )}\n            </Card>\n          </div>\n\n          {/* Right Side - Preview */}\n          <div>\n            <Card className=\"p-6 sticky top-24\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-bold\">Live Preview</h3>\n                <Badge variant=\"outline\" className=\"gap-2\">\n                  <Sparkles className=\"h-3 w-3\" />\n                  AI Enhanced\n                </Badge>\n              </div>\n\n              <div className=\"aspect-[8.5/11] bg-muted rounded-lg flex items-center justify-center border-2 border-dashed border-border\">\n                <div className=\"text-center text-muted-foreground\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>Resume preview will appear here</p>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":26752},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Resume } from \"@shared/schema\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Download, Trash2, Shield, Calendar } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      // Invalidate auth cache to ensure fresh state\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: resumes, isLoading, error: resumesError } = useQuery<Resume[]>({\n    queryKey: [\"/api/resumes\"],\n    enabled: isAuthenticated,\n    retry: (failureCount, error) => {\n      // Don't retry on 401\n      if (isUnauthorizedError(error as Error)) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Handle unauthorized error from resumes query\n  useEffect(() => {\n    if (resumesError && isUnauthorizedError(resumesError as Error)) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Unauthorized\",\n        description: \"Session expired. Logging in...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [resumesError, toast]);\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/resumes/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\"] });\n      toast({\n        title: \"Success\",\n        description: \"Resume deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (authLoading || !isAuthenticated) {\n    return null; // Will redirect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">My Resumes</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your resumes, download PDFs, and track blockchain verification\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {[1, 2, 3].map((i) => (\n              <Card key={i}>\n                <CardHeader>\n                  <Skeleton className=\"h-6 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-full\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : !resumes || resumes.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <FileText className=\"h-16 w-16 text-muted-foreground mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">No resumes yet</h3>\n              <p className=\"text-muted-foreground mb-6 text-center max-w-md\">\n                Create your first AI-powered resume and start landing interviews\n              </p>\n              <Button asChild data-testid=\"button-create-first-resume\">\n                <Link href=\"/create\">Create Resume</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {resumes.map((resume) => (\n              <Card key={resume.id} className=\"hover-elevate\" data-testid={`card-resume-${resume.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-start justify-between\">\n                    <span className=\"line-clamp-1\">\n                      {resume.personalInfo.fullName || \"Untitled Resume\"}\n                    </span>\n                    {resume.blockchainHash && (\n                      <Badge variant=\"secondary\" className=\"flex items-center gap-1 ml-2\">\n                        <Shield className=\"h-3 w-3\" />\n                        Verified\n                      </Badge>\n                    )}\n                  </CardTitle>\n                  <CardDescription className=\"flex items-center gap-1 text-sm\">\n                    <Calendar className=\"h-3 w-3\" />\n                    {resume.createdAt\n                      ? new Date(resume.createdAt).toLocaleDateString()\n                      : \"Unknown\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"text-sm text-muted-foreground\">\n                    {resume.personalInfo.email}\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    {resume.pdfUrl && (\n                      <Button asChild variant=\"outline\" size=\"sm\" className=\"flex-1\" data-testid={`button-download-${resume.id}`}>\n                        <a href={resume.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Download className=\"h-4 w-4 mr-1\" />\n                          Download\n                        </a>\n                      </Button>\n                    )}\n                    \n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-${resume.id}`}>\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Resume?</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            This action cannot be undone. This will permanently delete your resume.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction\n                            onClick={() => deleteMutation.mutate(resume.id)}\n                            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                          >\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7877},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: (failureCount, error) => {\n      // Don't retry on 401 Unauthorized\n      if (isUnauthorizedError(error as Error)) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // If we got a 401, user is definitely not authenticated\n  const isAuthenticated = !!(user && !isUnauthorizedError(error as Error));\n\n  return {\n    user: isAuthenticated ? user : undefined,\n    isLoading,\n    isAuthenticated,\n  };\n}\n","size_bytes":711},"server/replitAuth.ts":{"content":"// Replit Auth integration using OpenID Connect\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4290},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483}},"version":2}