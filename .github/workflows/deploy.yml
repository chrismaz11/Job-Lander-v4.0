name: Deploy Job-Lander to AWS

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_DEV: job-lander-development
  ECR_REPOSITORY_STAGING: job-lander-staging
  ECR_REPOSITORY_PROD: job-lander-production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd infrastructure && npm ci

      - name: Run TypeScript checks
        run: |
          npm run check
          cd infrastructure && npm run build

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_DEV }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_STAGING }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_PROD }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Determine ECR repository
        id: ecr-repo
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "repository=${{ env.ECR_REPOSITORY_PROD }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "repository=${{ env.ECR_REPOSITORY_STAGING }}" >> $GITHUB_OUTPUT
          else
            echo "repository=${{ env.ECR_REPOSITORY_DEV }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.ecr-repo.outputs.repository }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ steps.ecr-repo.outputs.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILDKIT_INLINE_CACHE=1

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install CDK dependencies
        run: cd infrastructure && npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd infrastructure
          npx cdk deploy JobLanderDev --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster JobLanderDev-JobLanderCluster \
            --service JobLanderDev-JobLanderService \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install CDK dependencies
        run: cd infrastructure && npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd infrastructure
          npx cdk deploy JobLanderStaging --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster JobLanderStaging-JobLanderCluster \
            --service JobLanderStaging-JobLanderService \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install CDK dependencies
        run: cd infrastructure && npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy infrastructure
        run: |
          cd infrastructure
          npx cdk deploy JobLanderProd --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster JobLanderProd-JobLanderCluster \
            --service JobLanderProd-JobLanderService \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get the ECS task ARN
          TASK_ARN=$(aws ecs list-tasks \
            --cluster JobLanderProd-JobLanderCluster \
            --service-name JobLanderProd-JobLanderService \
            --query 'taskArns[0]' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          # Run database migrations
          aws ecs execute-command \
            --cluster JobLanderProd-JobLanderCluster \
            --task $TASK_ARN \
            --container JobLanderContainer \
            --interactive \
            --command "npm run db:push" \
            --region ${{ env.AWS_REGION }}

  notification:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "üöÄ Production deployment successful!"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "üöÄ Staging deployment successful!"
          elif [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "üöÄ Development deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi